{"file_contents":{"SETUP_INSTRUCTIONS.md":{"content":"# WHIZZ TRAVELS - VS Code Setup Instructions\n\n## Prerequisites\n\nBefore setting up the project in VS Code, ensure you have the following installed:\n\n- **Node.js** (version 18 or higher) - [Download here](https://nodejs.org/)\n- **npm** (comes with Node.js) or **yarn**\n- **Git** - [Download here](https://git-scm.com/)\n- **VS Code** - [Download here](https://code.visualstudio.com/)\n\n## Setup Steps\n\n### 1. Clone/Download the Project\n```bash\n# If using git\ngit clone <your-repository-url>\ncd whizz-travels\n\n# Or simply download and extract the project files\n```\n\n### 2. Open in VS Code\n```bash\ncode .\n```\n\n### 3. Install Recommended Extensions\nWhen you open the project in VS Code, you'll see a popup asking to install recommended extensions. Click **\"Install All\"** or manually install these essential extensions:\n\n- **Tailwind CSS IntelliSense** - CSS class autocomplete\n- **Prettier** - Code formatter\n- **TypeScript** - Enhanced TypeScript support\n- **ESLint** - Code linting\n- **Auto Rename Tag** - HTML/JSX tag renaming\n- **Path Intellisense** - File path autocomplete\n\n### 4. Install Project Dependencies\nOpen the integrated terminal in VS Code (`Ctrl+`` ` or `View > Terminal`) and run:\n\n```bash\nnpm install\n```\n\nThis will install all the required dependencies listed in `package.json`.\n\n### 5. Environment Setup (Optional)\nIf you plan to use Stripe payments, create a `.env` file in the root directory:\n\n```bash\n# .env\nSTRIPE_SECRET_KEY=sk_test_your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=pk_test_your_stripe_public_key\n```\n\n### 6. Start Development Server\nRun the development server:\n\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## VS Code Features Configured\n\n### Quick Tasks\nUse `Ctrl+Shift+P` and type \"Tasks: Run Task\" to access:\n- **Install Dependencies** - Runs `npm install`\n- **Start Development Server** - Runs `npm run dev`\n- **Build Project** - Runs `npm run build`\n- **Type Check** - Runs TypeScript type checking\n\n### Keyboard Shortcuts\n- `Ctrl+Shift+P` - Command Palette\n- `Ctrl+`` ` - Toggle Terminal\n- `F5` - Start debugging\n- `Ctrl+F5` - Start without debugging\n\n### Auto-formatting\n- Files will auto-format on save using Prettier\n- TypeScript imports will be organized automatically\n- ESLint will highlight code issues\n\n## Project Structure\n\n```\nwhizz-travels/\n├── client/\n│   ├── src/\n│   │   ├── components/     # Reusable React components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom React hooks\n│   │   └── lib/          # Utilities and helpers\n│   └── index.html\n├── server/\n│   ├── index.ts          # Express server entry point\n│   ├── routes.ts         # API routes\n│   └── storage.ts        # Data storage layer\n├── shared/\n│   └── schema.ts         # Shared TypeScript types\n├── .vscode/              # VS Code configuration\n├── package.json          # Dependencies and scripts\n└── README.md\n```\n\n## Available Scripts\n\n- `npm run dev` - Start development server (frontend + backend)\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - TypeScript type checking\n- `npm run db:push` - Push database schema changes\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port already in use**: Change the port in `server/index.ts` or kill the process using port 5000\n2. **Module not found**: Run `npm install` to ensure all dependencies are installed\n3. **TypeScript errors**: Run `npm run check` to see detailed type errors\n\n### VS Code Specific Issues\n\n1. **Extensions not working**: Reload VS Code window (`Ctrl+Shift+P` → \"Developer: Reload Window\")\n2. **Intellisense not working**: Restart TypeScript server (`Ctrl+Shift+P` → \"TypeScript: Restart TS Server\")\n3. **Tailwind classes not showing**: Ensure Tailwind CSS IntelliSense extension is installed and enabled\n\n## Database Setup (Optional)\n\nThe project uses in-memory storage by default. For database setup:\n\n1. Set up a PostgreSQL database (local or cloud)\n2. Update connection details in `server/storage.ts`\n3. Run `npm run db:push` to create tables\n\n## Support\n\nIf you encounter any issues, check:\n1. Node.js version compatibility (18+)\n2. All dependencies installed (`npm install`)\n3. VS Code extensions installed\n4. No port conflicts\n\nFor additional help, refer to the project documentation or contact the development team.","size_bytes":4470},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WHIZZ TRAVELS - Full-Stack Travel Booking Application\n\n## Overview\n\nWHIZZ TRAVELS is a modern full-stack travel booking application that provides users with a comprehensive platform to discover destinations, browse travel packages, and make bookings. The application features a clean, responsive design with a focus on user experience and includes functionality for browsing destinations, viewing trip packages filtered by category, booking travel arrangements, and contacting the company.\n\nThe system is built as a single-page application with a React frontend and Express.js backend, utilizing PostgreSQL for data persistence and modern development tools for a robust development experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern React features\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component system for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Design**: RESTful API endpoints with JSON responses\n- **Error Handling**: Centralized error handling middleware with structured error responses\n- **Logging**: Custom request logging middleware for API monitoring\n- **Development**: Hot reload with Vite integration for seamless development experience\n\n### Database Architecture\n- **Database**: PostgreSQL with connection pooling\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: Comprehensive schema covering users, destinations, trip packages, bookings, contacts, flights, and hotels\n- **Data Validation**: Zod schemas for runtime type checking and API validation\n- **Connection**: Neon Database serverless PostgreSQL for scalable cloud hosting\n\n### Data Models\nThe application manages several core entities:\n- **Users**: Authentication and user account management\n- **Destinations**: Travel destinations with descriptions, pricing, and ratings\n- **Trip Packages**: Categorized travel packages (luxury, adventure, family, cultural) with inclusions\n- **Bookings**: Customer booking information with status tracking\n- **Contacts**: Customer inquiries and communication\n- **Flights & Hotels**: Additional travel services for comprehensive booking\n\n### Authentication & Authorization\n- Session-based authentication with PostgreSQL session storage\n- User account management with secure password handling\n- Role-based access patterns prepared for future admin functionality\n\n### Component Architecture\n- Modular component structure with reusable UI components\n- Custom hooks for mobile responsiveness and toast notifications\n- Separation of concerns between presentation and business logic components\n- Consistent styling through design system and component variants\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React router\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation integration\n\n### Database & Backend\n- **drizzle-orm**: Type-safe SQL query builder\n- **drizzle-kit**: Database migration tools\n- **@neondatabase/serverless**: Serverless PostgreSQL client\n- **connect-pg-simple**: PostgreSQL session store\n\n### UI & Styling\n- **@radix-ui/***: Accessible UI primitives (accordion, dialog, dropdown, etc.)\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Validation & Utilities\n- **zod**: Schema validation library\n- **drizzle-zod**: Drizzle ORM Zod integration\n- **clsx**: Conditional className utility\n- **date-fns**: Date manipulation library\n\n### Development Tools\n- **vite**: Build tool and development server\n- **@vitejs/plugin-react**: React plugin for Vite\n- **typescript**: Static type checking\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Replit integration tools\n\n### Carousel & Interactive Elements\n- **embla-carousel-react**: Touch-friendly carousel component\n- **cmdk**: Command palette and search interface","size_bytes":4680},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Destinations API\n  app.get(\"/api/destinations\", async (_req, res) => {\n    try {\n      const destinations = await storage.getAllDestinations();\n      res.json(destinations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destinations\" });\n    }\n  });\n\n  app.get(\"/api/destinations/:id\", async (req, res) => {\n    try {\n      const destination = await storage.getDestination(req.params.id);\n      if (!destination) {\n        return res.status(404).json({ message: \"Destination not found\" });\n      }\n      res.json(destination);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch destination\" });\n    }\n  });\n\n  // Trip packages API\n  app.get(\"/api/trip-packages\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const packages = await storage.getTripPackagesByCategory(category);\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip packages\" });\n    }\n  });\n\n  app.get(\"/api/trip-packages/:id\", async (req, res) => {\n    try {\n      const tripPackage = await storage.getTripPackage(req.params.id);\n      if (!tripPackage) {\n        return res.status(404).json({ message: \"Trip package not found\" });\n      }\n      res.json(tripPackage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trip package\" });\n    }\n  });\n\n  // Bookings API\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookingData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking(bookingData);\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create booking\" });\n      }\n    }\n  });\n\n  app.get(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const booking = await storage.getBooking(req.params.id);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update booking status\" });\n    }\n  });\n\n  // Contact form API\n  app.post(\"/api/contacts\", async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      res.status(201).json({ \n        message: \"Contact form submitted successfully\",\n        id: contact.id\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid contact data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to submit contact form\" });\n      }\n    }\n  });\n\n  // Flights API\n  app.get(\"/api/flights\", async (req, res) => {\n    try {\n      const { from, to } = req.query;\n      const flights = await storage.searchFlights(from as string, to as string);\n      res.json(flights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search flights\" });\n    }\n  });\n\n  // Hotels API\n  app.get(\"/api/hotels\", async (req, res) => {\n    try {\n      const { location } = req.query;\n      const hotels = await storage.searchHotels(location as string);\n      res.json(hotels);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search hotels\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4369},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Destination, type InsertDestination,\n  type TripPackage, type InsertTripPackage,\n  type Booking, type InsertBooking,\n  type Contact, type InsertContact,\n  type Flight, type InsertFlight,\n  type Hotel, type InsertHotel\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Destination operations\n  getAllDestinations(): Promise<Destination[]>;\n  getDestination(id: string): Promise<Destination | undefined>;\n  createDestination(destination: InsertDestination): Promise<Destination>;\n\n  // Trip package operations\n  getAllTripPackages(): Promise<TripPackage[]>;\n  getTripPackagesByCategory(category?: string): Promise<TripPackage[]>;\n  getTripPackage(id: string): Promise<TripPackage | undefined>;\n  createTripPackage(tripPackage: InsertTripPackage): Promise<TripPackage>;\n\n  // Booking operations\n  getAllBookings(): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: string): Promise<Booking | undefined>;\n\n  // Contact operations\n  getAllContacts(): Promise<Contact[]>;\n  getContact(id: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n\n  // Flight operations\n  getAllFlights(): Promise<Flight[]>;\n  searchFlights(from?: string, to?: string): Promise<Flight[]>;\n  createFlight(flight: InsertFlight): Promise<Flight>;\n\n  // Hotel operations\n  getAllHotels(): Promise<Hotel[]>;\n  searchHotels(location?: string): Promise<Hotel[]>;\n  createHotel(hotel: InsertHotel): Promise<Hotel>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private destinations: Map<string, Destination>;\n  private tripPackages: Map<string, TripPackage>;\n  private bookings: Map<string, Booking>;\n  private contacts: Map<string, Contact>;\n  private flights: Map<string, Flight>;\n  private hotels: Map<string, Hotel>;\n\n  constructor() {\n    this.users = new Map();\n    this.destinations = new Map();\n    this.tripPackages = new Map();\n    this.bookings = new Map();\n    this.contacts = new Map();\n    this.flights = new Map();\n    this.hotels = new Map();\n\n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample destinations\n    const sampleDestinations: Destination[] = [\n      {\n        id: randomUUID(),\n        name: \"Maldives\",\n        description: \"Crystal clear waters and pristine beaches\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?auto=format&fit=crop&w=400&h=300\",\n        price: \"2499\",\n        rating: \"4.8\",\n        location: \"Indian Ocean\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Tokyo, Japan\",\n        description: \"Modern cityscape meets ancient traditions\",\n        imageUrl: \"https://images.unsplash.com/photo-1528164344705-47542687000d?auto=format&fit=crop&w=400&h=300\",\n        price: \"1899\",\n        rating: \"4.7\",\n        location: \"Japan\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Paris, France\",\n        description: \"The city of lights and romance\",\n        imageUrl: \"https://images.unsplash.com/photo-1467269204594-9661b134dd2b?auto=format&fit=crop&w=400&h=300\",\n        price: \"1599\",\n        rating: \"4.6\",\n        location: \"France\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Safari, Kenya\",\n        description: \"Wildlife adventures in the savanna\",\n        imageUrl: \"https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?auto=format&fit=crop&w=400&h=300\",\n        price: \"3299\",\n        rating: \"4.9\",\n        location: \"Kenya\",\n        createdAt: new Date()\n      }\n    ];\n\n    sampleDestinations.forEach(dest => this.destinations.set(dest.id, dest));\n\n    // Sample trip packages\n    const samplePackages: TripPackage[] = [\n      {\n        id: randomUUID(),\n        title: \"Maldives Paradise Retreat\",\n        description: \"7 days in overwater villas with private pools, spa treatments, and gourmet dining.\",\n        imageUrl: \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?auto=format&fit=crop&w=500&h=300\",\n        price: \"4999\",\n        duration: 7,\n        category: \"luxury\",\n        rating: \"5.0\",\n        inclusions: [\"Overwater villa accommodation\", \"All meals & premium beverages\", \"Spa treatments & water activities\"],\n        location: \"Maldives\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Himalayan Base Camp Trek\",\n        description: \"14-day guided trek to Everest Base Camp with experienced Sherpa guides.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?auto=format&fit=crop&w=500&h=300\",\n        price: \"2899\",\n        duration: 14,\n        category: \"adventure\",\n        rating: \"4.8\",\n        inclusions: [\"Expert Sherpa guides\", \"All permits & equipment\", \"Mountain lodge accommodation\"],\n        location: \"Nepal\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Japan Family Discovery\",\n        description: \"10 days exploring Tokyo, Kyoto, and Osaka with family-friendly activities.\",\n        imageUrl: \"https://images.unsplash.com/photo-1480796927426-f609979314bd?auto=format&fit=crop&w=500&h=300\",\n        price: \"3299\",\n        duration: 10,\n        category: \"family\",\n        rating: \"4.9\",\n        inclusions: [\"Theme park tickets included\", \"Kid-friendly restaurants\", \"Cultural workshops for children\"],\n        location: \"Japan\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Morocco Cultural Immersion\",\n        description: \"8 days exploring imperial cities, markets, and Sahara Desert camping.\",\n        imageUrl: \"https://images.unsplash.com/photo-1539650116574-75c0c6d0e5cd?auto=format&fit=crop&w=500&h=300\",\n        price: \"1899\",\n        duration: 8,\n        category: \"cultural\",\n        rating: \"4.7\",\n        inclusions: [\"Sahara Desert camping\", \"Traditional cooking classes\", \"Local guide experiences\"],\n        location: \"Morocco\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Premium African Safari\",\n        description: \"9 days luxury safari across Kenya and Tanzania with exclusive game viewing.\",\n        imageUrl: \"https://images.unsplash.com/photo-1516426122078-c23e76319801?auto=format&fit=crop&w=500&h=300\",\n        price: \"6799\",\n        duration: 9,\n        category: \"luxury\",\n        rating: \"5.0\",\n        inclusions: [\"Luxury tented camps\", \"Private game drives\", \"Big 5 wildlife viewing\"],\n        location: \"Kenya & Tanzania\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Caribbean Family Fun\",\n        description: \"7 days all-inclusive resort with kids club, water sports, and family activities.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?auto=format&fit=crop&w=500&h=300\",\n        price: \"2199\",\n        duration: 7,\n        category: \"family\",\n        rating: \"4.6\",\n        inclusions: [\"All-inclusive meals & drinks\", \"Kids club & teen activities\", \"Water sports & beach access\"],\n        location: \"Caribbean\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"India Cultural Heritage\",\n        description: \"12 days exploring the Golden Triangle with authentic cultural experiences.\",\n        imageUrl: \"https://images.unsplash.com/photo-1524492412937-b28074a5d7da?auto=format&fit=crop&w=500&h=300\",\n        price: \"2299\",\n        duration: 12,\n        category: \"cultural\",\n        rating: \"4.8\",\n        inclusions: [\"Taj Mahal & Red Fort tours\", \"Traditional dance performances\", \"Local cooking workshops\"],\n        location: \"India\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Peru Machu Picchu Explorer\",\n        description: \"9 days discovering ancient Incan civilization and local traditions.\",\n        imageUrl: \"https://images.unsplash.com/photo-1587595431973-160d0d94add1?auto=format&fit=crop&w=500&h=300\",\n        price: \"2799\",\n        duration: 9,\n        category: \"cultural\",\n        rating: \"4.9\",\n        inclusions: [\"Machu Picchu guided tour\", \"Sacred Valley exploration\", \"Andean village visits\"],\n        location: \"Peru\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Greece Island Mythology\",\n        description: \"10 days exploring ancient Greek culture across multiple islands.\",\n        imageUrl: \"https://images.unsplash.com/photo-1555993539-1732b0258734?auto=format&fit=crop&w=500&h=300\",\n        price: \"3199\",\n        duration: 10,\n        category: \"cultural\",\n        rating: \"4.7\",\n        inclusions: [\"Acropolis & Parthenon tours\", \"Archaeological site visits\", \"Traditional Greek cuisine\"],\n        location: \"Greece\",\n        createdAt: new Date()\n      }\n    ];\n\n    samplePackages.forEach(pkg => this.tripPackages.set(pkg.id, pkg));\n\n    // Sample flights\n    const sampleFlights: Flight[] = [\n      {\n        id: randomUUID(),\n        airline: \"British Airways\",\n        from: \"NYC\",\n        to: \"LON\",\n        departureTime: \"08:30\",\n        arrivalTime: \"14:45\",\n        duration: \"6h 15m\",\n        stops: 1,\n        price: \"649\",\n        class: \"economy\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        airline: \"Emirates\",\n        from: \"NYC\",\n        to: \"DXB\",\n        departureTime: \"23:50\",\n        arrivalTime: \"19:30\",\n        duration: \"12h 40m\",\n        stops: 0,\n        price: \"899\",\n        class: \"economy\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        airline: \"Japan Airlines\",\n        from: \"LAX\",\n        to: \"NRT\",\n        departureTime: \"11:30\",\n        arrivalTime: \"15:45+1\",\n        duration: \"11h 15m\",\n        stops: 0,\n        price: \"1299\",\n        class: \"economy\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        airline: \"Air France\",\n        from: \"JFK\",\n        to: \"CDG\",\n        departureTime: \"22:15\",\n        arrivalTime: \"11:30+1\",\n        duration: \"7h 15m\",\n        stops: 0,\n        price: \"789\",\n        class: \"economy\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        airline: \"Kenya Airways\",\n        from: \"JFK\",\n        to: \"NBO\",\n        departureTime: \"06:45\",\n        arrivalTime: \"05:30+1\",\n        duration: \"14h 45m\",\n        stops: 1,\n        price: \"1199\",\n        class: \"economy\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        airline: \"Qatar Airways\",\n        from: \"LAX\",\n        to: \"MLE\",\n        departureTime: \"14:20\",\n        arrivalTime: \"06:15+2\",\n        duration: \"22h 55m\",\n        stops: 2,\n        price: \"1599\",\n        class: \"economy\",\n        createdAt: new Date()\n      }\n    ];\n\n    sampleFlights.forEach(flight => this.flights.set(flight.id, flight));\n\n    // Sample hotels\n    const sampleHotels: Hotel[] = [\n      {\n        id: randomUUID(),\n        name: \"Grand Ocean Resort\",\n        location: \"Maldives\",\n        imageUrl: \"https://images.unsplash.com/photo-1611892440504-42a792e24d32?auto=format&fit=crop&w=300&h=200\",\n        rating: \"5.0\",\n        pricePerNight: \"289\",\n        amenities: [\"Ocean view\", \"Pool\", \"Spa\", \"Free WiFi\"],\n        description: \"Luxury resort with overwater villas and world-class amenities\",\n        starRating: 5,\n        distanceFromCenter: \"0.5 miles from beach\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Tokyo Central Hotel\",\n        location: \"Tokyo, Japan\",\n        imageUrl: \"https://images.unsplash.com/photo-1564501049412-61c2a3083791?auto=format&fit=crop&w=300&h=200\",\n        rating: \"4.7\",\n        pricePerNight: \"189\",\n        amenities: [\"City view\", \"Gym\", \"Restaurant\", \"Free WiFi\"],\n        description: \"Modern hotel in the heart of Tokyo with easy access to attractions\",\n        starRating: 4,\n        distanceFromCenter: \"2 miles from city center\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Le Marais Boutique Hotel\",\n        location: \"Paris, France\",\n        imageUrl: \"https://images.unsplash.com/photo-1455587734955-081b22074882?auto=format&fit=crop&w=300&h=200\",\n        rating: \"4.8\",\n        pricePerNight: \"245\",\n        amenities: [\"Historic building\", \"Breakfast\", \"Concierge\", \"Free WiFi\"],\n        description: \"Charming boutique hotel in the historic Marais district\",\n        starRating: 4,\n        distanceFromCenter: \"1 mile from Louvre\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Safari Lodge Kenya\",\n        location: \"Kenya\",\n        imageUrl: \"https://images.unsplash.com/photo-1518684079-3c830dcef090?auto=format&fit=crop&w=300&h=200\",\n        rating: \"4.9\",\n        pricePerNight: \"399\",\n        amenities: [\"Safari tours\", \"Restaurant\", \"Pool\", \"Nature view\"],\n        description: \"Authentic safari lodge with stunning wildlife views\",\n        starRating: 4,\n        distanceFromCenter: \"15 miles from Nairobi\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Taj Palace Hotel\",\n        location: \"India\",\n        imageUrl: \"https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?auto=format&fit=crop&w=300&h=200\",\n        rating: \"4.6\",\n        pricePerNight: \"125\",\n        amenities: [\"Traditional decor\", \"Spa\", \"Restaurant\", \"Cultural tours\"],\n        description: \"Magnificent palace hotel showcasing Indian heritage\",\n        starRating: 5,\n        distanceFromCenter: \"3 miles from Taj Mahal\",\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: \"Santorini Cliffside Resort\",\n        location: \"Greece\",\n        imageUrl: \"https://images.unsplash.com/photo-1613395877344-13d4a8e0d49e?auto=format&fit=crop&w=300&h=200\",\n        rating: \"4.9\",\n        pricePerNight: \"295\",\n        amenities: [\"Sea view\", \"Infinity pool\", \"Restaurant\", \"Sunset terrace\"],\n        description: \"Stunning cliffside resort with breathtaking Aegean Sea views\",\n        starRating: 5,\n        distanceFromCenter: \"2 miles from Oia\",\n        createdAt: new Date()\n      }\n    ];\n\n    sampleHotels.forEach(hotel => this.hotels.set(hotel.id, hotel));\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Destination operations\n  async getAllDestinations(): Promise<Destination[]> {\n    return Array.from(this.destinations.values());\n  }\n\n  async getDestination(id: string): Promise<Destination | undefined> {\n    return this.destinations.get(id);\n  }\n\n  async createDestination(insertDestination: InsertDestination): Promise<Destination> {\n    const id = randomUUID();\n    const destination: Destination = { ...insertDestination, id, createdAt: new Date() };\n    this.destinations.set(id, destination);\n    return destination;\n  }\n\n  // Trip package operations\n  async getAllTripPackages(): Promise<TripPackage[]> {\n    return Array.from(this.tripPackages.values());\n  }\n\n  async getTripPackagesByCategory(category?: string): Promise<TripPackage[]> {\n    const packages = Array.from(this.tripPackages.values());\n    if (!category || category === 'all') {\n      return packages;\n    }\n    return packages.filter(pkg => pkg.category === category);\n  }\n\n  async getTripPackage(id: string): Promise<TripPackage | undefined> {\n    return this.tripPackages.get(id);\n  }\n\n  async createTripPackage(insertTripPackage: InsertTripPackage): Promise<TripPackage> {\n    const id = randomUUID();\n    const tripPackage: TripPackage = { ...insertTripPackage, id, createdAt: new Date() };\n    this.tripPackages.set(id, tripPackage);\n    return tripPackage;\n  }\n\n  // Booking operations\n  async getAllBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const booking: Booking = { \n      ...insertBooking, \n      id, \n      status: \"pending\", \n      createdAt: new Date(),\n      packageId: insertBooking.packageId || null,\n      phone: insertBooking.phone || null,\n      returnDate: insertBooking.returnDate || null\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking | undefined> {\n    const booking = this.bookings.get(id);\n    if (booking) {\n      booking.status = status;\n      this.bookings.set(id, booking);\n      return booking;\n    }\n    return undefined;\n  }\n\n  // Contact operations\n  async getAllContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id, \n      createdAt: new Date(),\n      phone: insertContact.phone || null,\n      subject: insertContact.subject || null,\n      newsletter: insertContact.newsletter || null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  // Flight operations\n  async getAllFlights(): Promise<Flight[]> {\n    return Array.from(this.flights.values());\n  }\n\n  async searchFlights(from?: string, to?: string): Promise<Flight[]> {\n    const flights = Array.from(this.flights.values());\n    if (!from && !to) {\n      return flights;\n    }\n    return flights.filter(flight => {\n      const matchFrom = !from || flight.from.toLowerCase().includes(from.toLowerCase());\n      const matchTo = !to || flight.to.toLowerCase().includes(to.toLowerCase());\n      return matchFrom && matchTo;\n    });\n  }\n\n  async createFlight(insertFlight: InsertFlight): Promise<Flight> {\n    const id = randomUUID();\n    const flight: Flight = { \n      ...insertFlight, \n      id, \n      createdAt: new Date(),\n      class: insertFlight.class || \"economy\"\n    };\n    this.flights.set(id, flight);\n    return flight;\n  }\n\n  // Hotel operations\n  async getAllHotels(): Promise<Hotel[]> {\n    return Array.from(this.hotels.values());\n  }\n\n  async searchHotels(location?: string): Promise<Hotel[]> {\n    const hotels = Array.from(this.hotels.values());\n    if (!location) {\n      return hotels;\n    }\n    return hotels.filter(hotel => \n      hotel.location.toLowerCase().includes(location.toLowerCase()) ||\n      hotel.name.toLowerCase().includes(location.toLowerCase())\n    );\n  }\n\n  async createHotel(insertHotel: InsertHotel): Promise<Hotel> {\n    const id = randomUUID();\n    const hotel: Hotel = { \n      ...insertHotel, \n      id, \n      createdAt: new Date(),\n      distanceFromCenter: insertHotel.distanceFromCenter || null\n    };\n    this.hotels.set(id, hotel);\n    return hotel;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":19719},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const destinations = pgTable(\"destinations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull(),\n  location: text(\"location\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tripPackages = pgTable(\"trip_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  duration: integer(\"duration\").notNull(), // days\n  category: text(\"category\").notNull(), // luxury, adventure, family, cultural\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull(),\n  inclusions: text(\"inclusions\").array().notNull(),\n  location: text(\"location\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  packageId: varchar(\"package_id\").references(() => tripPackages.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  travelers: integer(\"travelers\").notNull(),\n  departureDate: timestamp(\"departure_date\").notNull(),\n  returnDate: timestamp(\"return_date\"),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  newsletter: boolean(\"newsletter\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const flights = pgTable(\"flights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  airline: text(\"airline\").notNull(),\n  from: text(\"from_location\").notNull(),\n  to: text(\"to_location\").notNull(),\n  departureTime: text(\"departure_time\").notNull(),\n  arrivalTime: text(\"arrival_time\").notNull(),\n  duration: text(\"duration\").notNull(),\n  stops: integer(\"stops\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  class: text(\"class\").notNull().default(\"economy\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const hotels = pgTable(\"hotels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull(),\n  pricePerNight: decimal(\"price_per_night\", { precision: 10, scale: 2 }).notNull(),\n  amenities: text(\"amenities\").array().notNull(),\n  description: text(\"description\").notNull(),\n  starRating: integer(\"star_rating\").notNull(),\n  distanceFromCenter: text(\"distance_from_center\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertDestinationSchema = createInsertSchema(destinations).omit({ id: true, createdAt: true });\nexport const insertTripPackageSchema = createInsertSchema(tripPackages).omit({ id: true, createdAt: true });\nexport const insertBookingSchema = createInsertSchema(bookings).omit({ id: true, createdAt: true, status: true });\nexport const insertContactSchema = createInsertSchema(contacts).omit({ id: true, createdAt: true });\nexport const insertFlightSchema = createInsertSchema(flights).omit({ id: true, createdAt: true });\nexport const insertHotelSchema = createInsertSchema(hotels).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Destination = typeof destinations.$inferSelect;\nexport type InsertDestination = z.infer<typeof insertDestinationSchema>;\nexport type TripPackage = typeof tripPackages.$inferSelect;\nexport type InsertTripPackage = z.infer<typeof insertTripPackageSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Flight = typeof flights.$inferSelect;\nexport type InsertFlight = z.infer<typeof insertFlightSchema>;\nexport type Hotel = typeof hotels.$inferSelect;\nexport type InsertHotel = z.infer<typeof insertHotelSchema>;\n","size_bytes":5409},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Trips from \"@/pages/trips\";\nimport Booking from \"@/pages/booking\";\nimport DestinationDetails from \"@/pages/destination-details\";\nimport Payment from \"@/pages/payment\";\nimport BookingConfirmation from \"@/pages/booking-confirmation\";\nimport Navbar from \"@/components/navbar\";\nimport Footer from \"@/components/footer\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/trips\" component={Trips} />\n      <Route path=\"/booking\" component={Booking} />\n      <Route path=\"/destination/:id\" component={DestinationDetails} />\n      <Route path=\"/payment\" component={Payment} />\n      <Route path=\"/booking-confirmation\" component={BookingConfirmation} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen flex flex-col\">\n          <Navbar />\n          <main className=\"flex-1 pt-16\">\n            <Router />\n          </main>\n          <Footer />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1670},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(218.18, 81.08%, 53.73%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(160.26, 82.43%, 39.8%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(42.4, 92.51%, 51.18%);\n  --accent-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(218.18, 81.08%, 53.73%);\n  --chart-1: hsl(218.18, 81.08%, 53.73%);\n  --chart-2: hsl(160.26, 82.43%, 39.8%);\n  --chart-3: hsl(42.4, 92.51%, 51.18%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(218.18, 81.08%, 53.73%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(218.18, 81.08%, 53.73%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(218.18, 81.08%, 53.73%);\n  --font-sans: 'Poppins', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00), 0px 1px 2px -1px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00), 0px 1px 2px -1px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00), 0px 2px 4px -1px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00), 0px 4px 6px -1px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00), 0px 8px 10px -1px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(218.18, 81.08%, 53.73% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(218.18, 81.08%, 53.73%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(42.4, 92.51%, 51.18%);\n  --accent-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(218.18, 81.08%, 53.73%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n  \n  .whizz-logo {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 800;\n    font-size: 1.5rem;\n    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 50%, #1e40af 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    letter-spacing: 0.05em;\n    text-shadow: 0 2px 4px rgba(59, 130, 246, 0.1);\n  }\n  \n  .whizz-tagline {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 500;\n    font-size: 0.875rem;\n    color: #6b7280;\n    letter-spacing: 0.025em;\n  }\n}\n","size_bytes":4502},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/destination-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Destination } from \"@shared/schema\";\n\ninterface DestinationCardProps {\n  destination: Destination;\n  onViewDetails?: (id: string) => void;\n}\n\nexport default function DestinationCard({ destination, onViewDetails }: DestinationCardProps) {\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg overflow-hidden transform hover:scale-105 transition-transform cursor-pointer\">\n      <img\n        src={destination.imageUrl}\n        alt={destination.name}\n        className=\"w-full h-48 object-cover\"\n        loading=\"lazy\"\n      />\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-semibold mb-2\">{destination.name}</h3>\n        <p className=\"text-gray-600 mb-4\">{destination.description}</p>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-primary font-bold text-lg\">From ${destination.price}</span>\n          <Button\n            variant=\"ghost\"\n            className=\"text-primary hover:text-primary/80 font-medium\"\n            onClick={() => window.location.href = `/destination/${destination.id}`}\n          >\n            View Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1303},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Plane, Facebook, Instagram, Twitter, Youtube, Phone, Mail, MapPin } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <div className=\"relative\">\n                <Plane className=\"text-primary text-3xl mr-3\" />\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"whizz-logo text-white\">WHIZZ TRAVELS</span>\n                <span className=\"whizz-tagline\">Your Journey Begins Here</span>\n              </div>\n            </div>\n            <p className=\"text-gray-400 mb-4\">\n              Creating unforgettable travel experiences since 2010. Your journey begins with us.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"https://www.facebook.com/whizztravels\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-primary transition-colors\"\n                aria-label=\"Follow us on Facebook\"\n                data-testid=\"link-facebook\"\n              >\n                <Facebook size={20} />\n              </a>\n              <a\n                href=\"https://www.instagram.com/whizztravels\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-primary transition-colors\"\n                aria-label=\"Follow us on Instagram\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram size={20} />\n              </a>\n              <a\n                href=\"https://www.twitter.com/whizztravels\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-primary transition-colors\"\n                aria-label=\"Follow us on Twitter\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter size={20} />\n              </a>\n              <a\n                href=\"https://www.youtube.com/c/whizztravels\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-primary transition-colors\"\n                aria-label=\"Subscribe to our YouTube channel\"\n                data-testid=\"link-youtube\"\n              >\n                <Youtube size={20} />\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/trips\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Trip Plans\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/booking\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Book a Ticket\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Contact\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Destinations</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Maldives\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Japan\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Europe\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Africa Safari\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  Caribbean\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Contact Info</h3>\n            <div className=\"space-y-2 text-gray-400\">\n              <p className=\"flex items-center\">\n                <Phone size={16} className=\"mr-2\" />\n                +1 (555) 123-4567\n              </p>\n              <p className=\"flex items-center\">\n                <Mail size={16} className=\"mr-2\" />\n                info@whizztravels.com\n              </p>\n              <p className=\"flex items-center\">\n                <MapPin size={16} className=\"mr-2\" />\n                123 Travel Street, NY 10001\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            &copy; 2024 WHIZZ TRAVELS. All rights reserved. | Privacy Policy | Terms of Service\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5857},"client/src/components/hero-section.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeroSectionProps {\n  title: string;\n  subtitle: string;\n  backgroundImage: string;\n  ctaText?: string;\n  ctaLink?: string;\n  showCta?: boolean;\n}\n\nexport default function HeroSection({\n  title,\n  subtitle,\n  backgroundImage,\n  ctaText = \"Start Your Journey\",\n  ctaLink = \"/trips\",\n  showCta = true,\n}: HeroSectionProps) {\n  return (\n    <section className=\"relative h-screen flex items-center justify-center\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `url(${backgroundImage})`,\n        }}\n      />\n      <div className=\"absolute inset-0 bg-black opacity-40\" />\n      <div className=\"relative z-10 text-center text-white px-4 max-w-4xl\">\n        <h1 className=\"text-5xl md:text-7xl font-bold mb-6\">{title}</h1>\n        <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto\">{subtitle}</p>\n        {showCta && (\n          <Link href={ctaLink}>\n            <Button\n              size=\"lg\"\n              className=\"bg-primary hover:bg-primary/90 text-white font-bold py-4 px-8 rounded-lg text-lg\"\n            >\n              {ctaText}\n            </Button>\n          </Link>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":1294},"client/src/components/interactive-map.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MapPin, Navigation, ZoomIn, ZoomOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Destination } from \"@shared/schema\";\n\ninterface InteractiveMapProps {\n  destinations: Destination[];\n  onDestinationClick?: (destination: Destination) => void;\n  selectedDestination?: Destination | null;\n}\n\ninterface MapDestination {\n  id: string;\n  name: string;\n  location: string;\n  price: string;\n  x: number; // Percentage position\n  y: number; // Percentage position\n  color: string;\n}\n\nexport default function InteractiveMap({ \n  destinations, \n  onDestinationClick, \n  selectedDestination \n}: InteractiveMapProps) {\n  const [zoom, setZoom] = useState(1);\n  const [hoveredDestination, setHoveredDestination] = useState<string | null>(null);\n\n  // Map destinations to coordinates (simulated world map positions)\n  const mapDestinations: MapDestination[] = destinations.map((dest) => {\n    let coordinates = { x: 50, y: 50 }; // Default center\n    let color = \"bg-primary\";\n\n    // Simulate real-world coordinates (very simplified)\n    if (dest.location.toLowerCase().includes('maldives')) {\n      coordinates = { x: 75, y: 65 };\n      color = \"bg-blue-500\";\n    } else if (dest.location.toLowerCase().includes('japan') || dest.location.toLowerCase().includes('tokyo')) {\n      coordinates = { x: 85, y: 35 };\n      color = \"bg-red-500\";\n    } else if (dest.location.toLowerCase().includes('france') || dest.location.toLowerCase().includes('paris')) {\n      coordinates = { x: 50, y: 30 };\n      color = \"bg-blue-600\";\n    } else if (dest.location.toLowerCase().includes('kenya') || dest.location.toLowerCase().includes('africa')) {\n      coordinates = { x: 55, y: 70 };\n      color = \"bg-green-600\";\n    } else if (dest.location.toLowerCase().includes('nepal')) {\n      coordinates = { x: 75, y: 40 };\n      color = \"bg-orange-500\";\n    } else if (dest.location.toLowerCase().includes('india')) {\n      coordinates = { x: 73, y: 45 };\n      color = \"bg-orange-600\";\n    } else if (dest.location.toLowerCase().includes('peru')) {\n      coordinates = { x: 25, y: 75 };\n      color = \"bg-yellow-600\";\n    } else if (dest.location.toLowerCase().includes('greece')) {\n      coordinates = { x: 55, y: 35 };\n      color = \"bg-blue-400\";\n    } else if (dest.location.toLowerCase().includes('morocco')) {\n      coordinates = { x: 45, y: 40 };\n      color = \"bg-amber-600\";\n    } else if (dest.location.toLowerCase().includes('caribbean')) {\n      coordinates = { x: 30, y: 50 };\n      color = \"bg-cyan-500\";\n    }\n\n    return {\n      id: dest.id,\n      name: dest.name,\n      location: dest.location,\n      price: dest.price,\n      x: coordinates.x,\n      y: coordinates.y,\n      color\n    };\n  });\n\n  const handleZoomIn = () => setZoom(Math.min(zoom + 0.2, 2));\n  const handleZoomOut = () => setZoom(Math.max(zoom - 0.2, 0.5));\n\n  return (\n    <Card className=\"w-full h-96 relative overflow-hidden bg-gradient-to-br from-blue-50 to-green-50\">\n      <CardContent className=\"p-0 h-full relative\">\n        {/* Map Controls */}\n        <div className=\"absolute top-4 right-4 z-20 flex flex-col gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm\"\n            onClick={handleZoomIn}\n          >\n            <ZoomIn size={16} />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm\"\n            onClick={handleZoomOut}\n          >\n            <ZoomOut size={16} />\n          </Button>\n        </div>\n\n        {/* World Map Background */}\n        <div \n          className=\"absolute inset-0 bg-cover bg-center transition-transform duration-300\"\n          style={{\n            transform: `scale(${zoom})`,\n            backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1000 500'%3E%3Crect fill='%23e6f3ff' width='1000' height='500'/%3E%3Cpath fill='%23b8e6b8' d='M100 100h150v80h-150z'/%3E%3Cpath fill='%23ffeb9c' d='M300 120h200v100h-200z'/%3E%3Cpath fill='%23ffd1dc' d='M600 80h120v90h-120z'/%3E%3Cpath fill='%23e6ffe6' d='M150 300h180v120h-180z'/%3E%3Cpath fill='%23ffe4b5' d='M400 280h160v100h-160z'/%3E%3Cpath fill='%23f0e68c' d='M700 250h100v80h-100z'/%3E%3C/svg%3E\")`,\n          }}\n        />\n\n        {/* Destination Markers */}\n        {mapDestinations.map((dest) => (\n          <div\n            key={dest.id}\n            className=\"absolute z-10 cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-300 hover:scale-125\"\n            style={{\n              left: `${dest.x}%`,\n              top: `${dest.y}%`,\n              transform: `translate(-50%, -50%) scale(${zoom})`,\n            }}\n            onClick={() => {\n              const originalDest = destinations.find(d => d.id === dest.id);\n              if (originalDest && onDestinationClick) {\n                onDestinationClick(originalDest);\n              }\n            }}\n            onMouseEnter={() => setHoveredDestination(dest.id)}\n            onMouseLeave={() => setHoveredDestination(null)}\n          >\n            {/* Marker */}\n            <div className=\"relative\">\n              <div className={`w-6 h-6 rounded-full ${dest.color} border-2 border-white shadow-lg flex items-center justify-center animate-pulse`}>\n                <MapPin size={12} className=\"text-white\" />\n              </div>\n              \n              {/* Ripple Effect */}\n              <div className={`absolute inset-0 w-6 h-6 rounded-full ${dest.color} opacity-30 animate-ping`} />\n              \n              {/* Tooltip */}\n              {(hoveredDestination === dest.id || selectedDestination?.id === dest.id) && (\n                <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-lg p-3 min-w-48 z-20\">\n                  <div className=\"text-sm font-semibold text-gray-900\">{dest.name}</div>\n                  <div className=\"text-xs text-gray-600\">{dest.location}</div>\n                  <div className=\"text-sm font-bold text-primary mt-1\">From ${dest.price}</div>\n                  <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white\" />\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n\n        {/* Legend */}\n        <div className=\"absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-3\">\n          <div className=\"text-xs font-semibold text-gray-700 mb-2\">Popular Destinations</div>\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-1\" />\n              Beach\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <div className=\"w-2 h-2 bg-green-600 rounded-full mr-1\" />\n              Safari\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-1\" />\n              Adventure\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <div className=\"w-2 h-2 bg-amber-600 rounded-full mr-1\" />\n              Cultural\n            </Badge>\n          </div>\n        </div>\n\n        {/* Navigation Info */}\n        <div className=\"absolute top-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-2\">\n          <div className=\"flex items-center text-xs text-gray-600\">\n            <Navigation size={12} className=\"mr-1\" />\n            Click markers to explore destinations\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7915},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Menu, X, Plane } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { name: \"Home\", path: \"/\" },\n    { name: \"About Us\", path: \"/about\" },\n    { name: \"Trip Plans\", path: \"/trips\" },\n    { name: \"Book a Ticket\", path: \"/booking\" },\n    { name: \"Contact\", path: \"/contact\" },\n  ];\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  return (\n    <nav className=\"bg-white shadow-lg fixed w-full top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center group\">\n            <div className=\"relative\">\n              <Plane className=\"text-primary text-3xl mr-3 transform group-hover:rotate-12 transition-transform duration-300\" />\n              <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"whizz-logo\">WHIZZ TRAVELS</span>\n              <span className=\"whizz-tagline hidden sm:block\">Your Journey Begins Here</span>\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={cn(\n                  \"font-medium transition-colors\",\n                  location === item.path\n                    ? \"text-primary\"\n                    : \"text-gray-700 hover:text-primary\"\n                )}\n              >\n                {item.name}\n              </Link>\n            ))}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button\n              onClick={toggleMobileMenu}\n              className=\"text-gray-700 hover:text-primary\"\n            >\n              {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden bg-white border-t\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                onClick={() => setIsMobileMenuOpen(false)}\n                className={cn(\n                  \"block px-3 py-2 rounded-md text-base font-medium transition-colors\",\n                  location === item.path\n                    ? \"text-primary bg-primary/10\"\n                    : \"text-gray-700 hover:text-primary hover:bg-gray-50\"\n                )}\n              >\n                {item.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":3126},"client/src/components/office-map.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Navigation, ZoomIn, ZoomOut, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface OfficeMapProps {\n  address?: string;\n  city?: string;\n  coordinates?: { lat: number; lng: number };\n}\n\nexport default function OfficeMap({ \n  address = \"123 Travel Street, New York, NY 10001\",\n  city = \"New York\",\n  coordinates = { lat: 40.7128, lng: -74.0060 }\n}: OfficeMapProps) {\n  const [zoom, setZoom] = useState(1);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleZoomIn = () => setZoom(Math.min(zoom + 0.2, 2));\n  const handleZoomOut = () => setZoom(Math.max(zoom - 0.2, 0.5));\n\n  const openInGoogleMaps = () => {\n    const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;\n    window.open(googleMapsUrl, '_blank');\n  };\n\n  const openDirections = () => {\n    const directionsUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(address)}`;\n    window.open(directionsUrl, '_blank');\n  };\n\n  return (\n    <Card className=\"w-full h-96 relative overflow-hidden bg-gradient-to-br from-blue-50 to-indigo-100 border border-gray-200\">\n      <CardContent className=\"p-0 h-full relative\">\n        {/* Map Controls */}\n        <div className=\"absolute top-4 right-4 z-20 flex flex-col gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm shadow-md\"\n            onClick={handleZoomIn}\n          >\n            <ZoomIn size={16} />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm shadow-md\"\n            onClick={handleZoomOut}\n          >\n            <ZoomOut size={16} />\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"absolute top-4 left-4 z-20 flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm shadow-md\"\n            onClick={openDirections}\n          >\n            <Navigation size={16} className=\"mr-1\" />\n            Directions\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"bg-white/90 backdrop-blur-sm shadow-md\"\n            onClick={openInGoogleMaps}\n          >\n            <ExternalLink size={16} className=\"mr-1\" />\n            Open in Maps\n          </Button>\n        </div>\n\n        {/* Simulated Map Background */}\n        <div \n          className=\"absolute inset-0 bg-cover bg-center transition-transform duration-300\"\n          style={{\n            transform: `scale(${zoom})`,\n            backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1000 500'%3E%3Crect fill='%23e6f3ff' width='1000' height='500'/%3E%3Cpath fill='%23c8e6c9' d='M0 300h200v200H0z'/%3E%3Cpath fill='%23ffeb9c' d='M200 250h300v250H200z'/%3E%3Cpath fill='%23ffd1dc' d='M500 200h250v300H500z'/%3E%3Cpath fill='%23e1f5fe' d='M750 150h250v350H750z'/%3E%3Cpath fill='%23f3e5f5' d='M0 0h300v300H0z'/%3E%3Cpath fill='%23e8f5e8' d='M300 0h400v250H300z'/%3E%3Cpath fill='%23fff3e0' d='M700 0h300v200H700z'/%3E%3C/svg%3E\")`,\n          }}\n        />\n\n        {/* Street Network Overlay */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 100 100\">\n            <defs>\n              <pattern id=\"grid\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\">\n                <path d=\"M 10 0 L 0 0 0 10\" fill=\"none\" stroke=\"#6b7280\" strokeWidth=\"0.3\"/>\n              </pattern>\n            </defs>\n            <rect width=\"100\" height=\"100\" fill=\"url(#grid)\" />\n            {/* Main Roads */}\n            <line x1=\"0\" y1=\"50\" x2=\"100\" y2=\"50\" stroke=\"#4b5563\" strokeWidth=\"1\" />\n            <line x1=\"50\" y1=\"0\" x2=\"50\" y2=\"100\" stroke=\"#4b5563\" strokeWidth=\"1\" />\n            <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"100\" stroke=\"#6b7280\" strokeWidth=\"0.5\" />\n            <line x1=\"75\" y1=\"0\" x2=\"75\" y2=\"100\" stroke=\"#6b7280\" strokeWidth=\"0.5\" />\n            <line x1=\"0\" y1=\"25\" x2=\"100\" y2=\"25\" stroke=\"#6b7280\" strokeWidth=\"0.5\" />\n            <line x1=\"0\" y1=\"75\" x2=\"100\" y2=\"75\" stroke=\"#6b7280\" strokeWidth=\"0.5\" />\n          </svg>\n        </div>\n\n        {/* Office Location Marker */}\n        <div\n          className=\"absolute z-10 cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all duration-300\"\n          style={{\n            left: '55%',\n            top: '45%',\n            transform: `translate(-50%, -50%) scale(${zoom}) ${isHovered ? 'scale(1.2)' : ''}`,\n          }}\n          onClick={openInGoogleMaps}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {/* Main Marker */}\n          <div className=\"relative\">\n            <div className=\"w-8 h-8 rounded-full bg-primary border-4 border-white shadow-lg flex items-center justify-center animate-bounce\">\n              <MapPin size={16} className=\"text-white\" />\n            </div>\n            \n            {/* Ripple Effect */}\n            <div className=\"absolute inset-0 w-8 h-8 rounded-full bg-primary opacity-30 animate-ping\" />\n            \n            {/* Office Info Tooltip */}\n            {isHovered && (\n              <div className=\"absolute bottom-10 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-xl p-4 min-w-64 z-30 border border-gray-200\">\n                <div className=\"text-sm font-semibold text-gray-900 mb-1\">WHIZZ TRAVELS HQ</div>\n                <div className=\"text-xs text-gray-600 mb-2\">{address}</div>\n                <div className=\"flex gap-1\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">Open Now</Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">Travel Agency</Badge>\n                </div>\n                <div className=\"text-xs text-gray-500 mt-2\">Click for directions</div>\n                {/* Arrow pointing down */}\n                <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 -translate-y-1 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white\" />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Nearby Landmarks */}\n        <div\n          className=\"absolute z-5 transform -translate-x-1/2 -translate-y-1/2\"\n          style={{ left: '70%', top: '30%', transform: `translate(-50%, -50%) scale(${zoom})` }}\n        >\n          <div className=\"w-3 h-3 rounded-full bg-green-500 border border-white shadow-md\" title=\"Central Park\" />\n        </div>\n        \n        <div\n          className=\"absolute z-5 transform -translate-x-1/2 -translate-y-1/2\"\n          style={{ left: '40%', top: '60%', transform: `translate(-50%, -50%) scale(${zoom})` }}\n        >\n          <div className=\"w-3 h-3 rounded-full bg-blue-500 border border-white shadow-md\" title=\"Subway Station\" />\n        </div>\n\n        <div\n          className=\"absolute z-5 transform -translate-x-1/2 -translate-y-1/2\"\n          style={{ left: '30%', top: '35%', transform: `translate(-50%, -50%) scale(${zoom})` }}\n        >\n          <div className=\"w-3 h-3 rounded-full bg-orange-500 border border-white shadow-md\" title=\"Times Square\" />\n        </div>\n\n        {/* Map Legend */}\n        <div className=\"absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-3 shadow-lg\">\n          <div className=\"text-xs font-semibold text-gray-700 mb-2\">WHIZZ TRAVELS Office</div>\n          <div className=\"flex items-center text-xs text-gray-600\">\n            <div className=\"w-2 h-2 bg-primary rounded-full mr-2\" />\n            <span>123 Travel Street, NYC</span>\n          </div>\n          <div className=\"flex items-center text-xs text-gray-500 mt-1\">\n            <Navigation size={10} className=\"mr-1\" />\n            <span>Click for directions</span>\n          </div>\n        </div>\n\n        {/* Business Hours Badge */}\n        <div className=\"absolute top-16 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-medium border border-green-200\">\n          Open Now • Mon-Fri 9AM-7PM\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8369},"client/src/components/trip-package-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Check, Clock, MapPin, Users } from \"lucide-react\";\nimport type { TripPackage } from \"@shared/schema\";\n\ninterface TripPackageCardProps {\n  tripPackage: TripPackage;\n  onBook?: (id: string) => void;\n}\n\nexport default function TripPackageCard({ tripPackage, onBook }: TripPackageCardProps) {\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"luxury\":\n        return \"bg-accent text-accent-foreground\";\n      case \"adventure\":\n        return \"bg-red-500 text-white\";\n      case \"family\":\n        return \"bg-secondary text-secondary-foreground\";\n      case \"cultural\":\n        return \"bg-purple-500 text-white\";\n      default:\n        return \"bg-gray-500 text-white\";\n    }\n  };\n\n  const renderStars = (rating: string) => {\n    const ratingNum = parseFloat(rating);\n    const fullStars = Math.floor(ratingNum);\n    const hasHalfStar = ratingNum % 1 !== 0;\n    \n    return (\n      <div className=\"flex text-yellow-400\">\n        {[...Array(5)].map((_, i) => (\n          <Star\n            key={i}\n            size={16}\n            className={i < fullStars || (i === fullStars && hasHalfStar) ? \"fill-current\" : \"\"}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg overflow-hidden transform hover:scale-105 transition-all duration-300 hover:shadow-xl\">\n      <div className=\"relative\">\n        <img\n          src={tripPackage.imageUrl}\n          alt={tripPackage.title}\n          className=\"w-full h-48 object-cover\"\n          loading=\"lazy\"\n          onError={(e) => {\n            const target = e.target as HTMLImageElement;\n            target.src = 'https://images.unsplash.com/photo-1488646953014-85cb44e25828?auto=format&fit=crop&w=500&h=300';\n          }}\n        />\n        <div className=\"absolute top-3 left-3\">\n          <Badge className={getCategoryColor(tripPackage.category)}>\n            {tripPackage.category.charAt(0).toUpperCase() + tripPackage.category.slice(1)}\n          </Badge>\n        </div>\n        <div className=\"absolute top-3 right-3\">\n          <div className=\"bg-white/90 backdrop-blur-sm rounded-full px-2 py-1 flex items-center\">\n            {renderStars(tripPackage.rating)}\n            <span className=\"ml-1 text-xs font-medium\">{tripPackage.rating}</span>\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-bold mb-2 line-clamp-2\">{tripPackage.title}</h3>\n        <p className=\"text-gray-600 mb-4 text-sm line-clamp-2\">{tripPackage.description}</p>\n        \n        {/* Package Details */}\n        <div className=\"flex items-center gap-4 mb-4 text-sm text-gray-500\">\n          <div className=\"flex items-center gap-1\">\n            <MapPin size={14} />\n            <span>{tripPackage.location}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock size={14} />\n            <span>{tripPackage.duration} days</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <span className=\"text-2xl font-bold text-primary\">${tripPackage.price}</span>\n            <span className=\"text-gray-500 text-sm ml-1\">per person</span>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2 mb-4\">\n          {tripPackage.inclusions.slice(0, 2).map((inclusion, index) => (\n            <div key={index} className=\"flex items-start text-xs text-gray-600\">\n              <Check className=\"text-secondary mr-2 mt-0.5 flex-shrink-0\" size={12} />\n              <span className=\"line-clamp-1\">{inclusion}</span>\n            </div>\n          ))}\n          {tripPackage.inclusions.length > 2 && (\n            <div className=\"text-xs text-gray-500\">+{tripPackage.inclusions.length - 2} more inclusions</div>\n          )}\n        </div>\n        \n        <Button\n          className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-3 rounded-lg transition-colors\"\n          onClick={() => window.location.href = `/payment?package=${tripPackage.id}&travelers=1&type=package`}\n        >\n          Book Now - ${tripPackage.price}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4380},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import HeroSection from \"@/components/hero-section\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function About() {\n  const stats = [\n    { value: \"10K+\", label: \"Happy Travelers\" },\n    { value: \"50+\", label: \"Destinations\" },\n    { value: \"13\", label: \"Years Experience\" },\n  ];\n\n  const team = [\n    {\n      name: \"Emily Martinez\",\n      role: \"Founder & CEO\",\n      description: \"Travel enthusiast with 15+ years in the industry. Specializes in luxury and adventure travel.\",\n      initials: \"EM\",\n    },\n    {\n      name: \"Robert Chen\",\n      role: \"Head of Operations\",\n      description: \"Expert in Asian destinations and cultural tours. Fluent in 4 languages.\",\n      initials: \"RC\",\n    },\n    {\n      name: \"Sofia Patel\",\n      role: \"Travel Consultant\",\n      description: \"Specializes in family travel and European destinations. Mother of three and adventure seeker.\",\n      initials: \"SP\",\n    },\n  ];\n\n  const values = [\n    {\n      title: \"Excellence\",\n      description: \"We strive for perfection in every detail of your journey.\",\n    },\n    {\n      title: \"Authenticity\",\n      description: \"We connect you with genuine local experiences and cultures.\",\n    },\n    {\n      title: \"Sustainability\",\n      description: \"We promote responsible travel that benefits local communities.\",\n    },\n  ];\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"py-20 bg-primary text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">About WHIZZ TRAVELS</h1>\n          <p className=\"text-xl max-w-3xl mx-auto\">\n            We're passionate about creating unforgettable travel experiences that connect you with the world's most beautiful destinations.\n          </p>\n        </div>\n      </section>\n\n      {/* Company Story Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">Our Story</h2>\n              <p className=\"text-lg text-gray-700 mb-6\">\n                Founded in 2010, WHIZZ TRAVELS began as a small family business with a simple mission: to make extraordinary travel accessible to everyone. Over the years, we've helped thousands of travelers discover new cultures, create lasting memories, and fulfill their wanderlust.\n              </p>\n              <p className=\"text-lg text-gray-700 mb-6\">\n                Today, we're proud to be one of the leading travel agencies, offering personalized service and expertly crafted itineraries that go beyond the ordinary tourist experience.\n              </p>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                {stats.map((stat, index) => (\n                  <div key={index}>\n                    <div className=\"text-3xl font-bold text-primary\">{stat.value}</div>\n                    <div className=\"text-gray-600\">{stat.label}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div>\n              <img\n                src=\"https://images.unsplash.com/photo-1552664730-d307ca884978?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Travel team working together\"\n                className=\"rounded-xl shadow-lg w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Meet Our Team</h2>\n            <p className=\"text-xl text-gray-600\">Passionate travel experts dedicated to your perfect journey</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {team.map((member, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-32 h-32 bg-primary rounded-full mx-auto mb-4 flex items-center justify-center text-white text-2xl font-bold\">\n                  {member.initials}\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">{member.name}</h3>\n                <p className=\"text-primary font-medium mb-2\">{member.role}</p>\n                <p className=\"text-gray-600\">{member.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Mission & Values Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Our Mission & Values</h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n            <Card className=\"bg-primary text-white p-8 rounded-xl\">\n              <CardContent className=\"pt-0\">\n                <h3 className=\"text-2xl font-bold mb-4\">Our Mission</h3>\n                <p className=\"text-lg\">\n                  To inspire and enable meaningful travel experiences that broaden perspectives, create connections, and build memories that last a lifetime.\n                </p>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 gap-6\">\n              {values.map((value, index) => (\n                <div key={index} className=\"border-l-4 border-primary pl-6\">\n                  <h4 className=\"text-xl font-semibold mb-2\">{value.title}</h4>\n                  <p className=\"text-gray-600\">{value.description}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5908},"client/src/pages/booking-confirmation.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { CheckCircle, Download, Mail, Calendar, MapPin, Users, CreditCard } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function BookingConfirmation() {\n  const [transactionId, setTransactionId] = useState<string>(\"\");\n  const [bookingDetails, setBookingDetails] = useState({\n    bookingRef: \"\",\n    confirmationCode: \"\",\n    travelDate: \"\",\n    packageName: \"\",\n    destination: \"\",\n    duration: \"\",\n    travelers: 1,\n    totalAmount: 0,\n    customerName: \"\",\n    customerEmail: \"\",\n  });\n\n  useEffect(() => {\n    // Get transaction ID from URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const txnId = urlParams.get('transaction') || '';\n    setTransactionId(txnId);\n    \n    // Generate booking details (in real app, this would come from API)\n    const bookingRef = `WHZ${Date.now().toString().slice(-6)}`;\n    const confirmationCode = `WH${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n    \n    setBookingDetails({\n      bookingRef,\n      confirmationCode,\n      travelDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString(),\n      packageName: \"Maldives Paradise Retreat\",\n      destination: \"Maldives\",\n      duration: \"7 days\",\n      travelers: 2,\n      totalAmount: 5247.50,\n      customerName: \"John Doe\",\n      customerEmail: \"john.doe@email.com\",\n    });\n  }, []);\n\n  const handleDownloadTicket = () => {\n    // Create a simple text receipt\n    const receipt = `\nWHIZZ TRAVELS - BOOKING CONFIRMATION\n====================================\n\nBooking Reference: ${bookingDetails.bookingRef}\nConfirmation Code: ${bookingDetails.confirmationCode}\nTransaction ID: ${transactionId}\n\nTravel Package: ${bookingDetails.packageName}\nDestination: ${bookingDetails.destination}\nDuration: ${bookingDetails.duration}\nTravelers: ${bookingDetails.travelers}\nTravel Date: ${bookingDetails.travelDate}\n\nTotal Amount Paid: $${bookingDetails.totalAmount}\n\nCustomer Details:\nName: ${bookingDetails.customerName}\nEmail: ${bookingDetails.customerEmail}\n\nThank you for choosing WHIZZ TRAVELS!\nContact us: info@whizztravels.com\n`;\n\n    const blob = new Blob([receipt], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `WHIZZ_TRAVELS_${bookingDetails.bookingRef}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  const nextSteps = [\n    {\n      title: \"Check Your Email\",\n      description: \"We've sent detailed itinerary and travel documents to your email\",\n      icon: Mail,\n    },\n    {\n      title: \"Prepare for Travel\",\n      description: \"Check passport validity and visa requirements for your destination\",\n      icon: Calendar,\n    },\n    {\n      title: \"Contact Support\",\n      description: \"Have questions? Our travel experts are here to help 24/7\",\n      icon: Users,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Success Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Booking Confirmed!</h1>\n          <p className=\"text-lg text-gray-600\">\n            Your payment has been processed successfully. Get ready for an amazing journey!\n          </p>\n        </div>\n\n        {/* Booking Details Card */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Booking Details</span>\n              <Badge className=\"bg-green-100 text-green-800\">Confirmed</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Booking Reference</label>\n                  <p className=\"text-lg font-semibold text-gray-900\">{bookingDetails.bookingRef}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Confirmation Code</label>\n                  <p className=\"text-lg font-semibold text-gray-900\">{bookingDetails.confirmationCode}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Transaction ID</label>\n                  <p className=\"text-sm text-gray-700\">{transactionId}</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <MapPin className=\"w-5 h-5 text-primary mr-2\" />\n                  <div>\n                    <p className=\"font-semibold\">{bookingDetails.packageName}</p>\n                    <p className=\"text-sm text-gray-600\">{bookingDetails.destination}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 text-primary mr-2\" />\n                  <div>\n                    <p className=\"font-semibold\">Travel Date</p>\n                    <p className=\"text-sm text-gray-600\">{bookingDetails.travelDate}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 text-primary mr-2\" />\n                  <div>\n                    <p className=\"font-semibold\">{bookingDetails.travelers} Travelers</p>\n                    <p className=\"text-sm text-gray-600\">{bookingDetails.duration}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator className=\"my-6\" />\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"w-5 h-5 text-green-600 mr-2\" />\n                <span className=\"text-lg font-semibold\">Total Paid: ${bookingDetails.totalAmount}</span>\n              </div>\n              <div className=\"flex gap-3\">\n                <Button variant=\"outline\" onClick={handleDownloadTicket}>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Receipt\n                </Button>\n                <Button>\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Email Receipt\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>What's Next?</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {nextSteps.map((step, index) => {\n                const IconComponent = step.icon;\n                return (\n                  <div key={index} className=\"text-center\">\n                    <div className=\"inline-flex items-center justify-center w-12 h-12 bg-primary/10 rounded-full mb-3\">\n                      <IconComponent className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">{step.title}</h3>\n                    <p className=\"text-sm text-gray-600\">{step.description}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Important Information */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Important Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-sm text-gray-700\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-blue-900 mb-2\">Travel Documents</h4>\n                <p>Please ensure your passport is valid for at least 6 months from your travel date. Visa requirements may apply for your destination.</p>\n              </div>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-yellow-900 mb-2\">Cancellation Policy</h4>\n                <p>Free cancellation up to 72 hours before departure. Cancellations after this period may incur charges.</p>\n              </div>\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-green-900 mb-2\">Travel Insurance</h4>\n                <p>We recommend purchasing travel insurance to protect your trip investment. Contact us for insurance options.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"text-center space-x-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"lg\">\n              Back to Home\n            </Button>\n          </Link>\n          <Link href=\"/trips\">\n            <Button size=\"lg\">\n              Book Another Trip\n            </Button>\n          </Link>\n          <Link href=\"/contact\">\n            <Button variant=\"outline\" size=\"lg\">\n              Contact Support\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9830},"client/src/pages/booking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Plane, Bed, Briefcase, Star, Crown, Mountain, Users, Landmark } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBookingSchema } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport type { InsertBooking, Flight, Hotel } from \"@shared/schema\";\n\nexport default function Booking() {\n  const [activeTab, setActiveTab] = useState(\"flights\");\n  const [flightSearchResults, setFlightSearchResults] = useState<Flight[]>([]);\n  const [hotelSearchResults, setHotelSearchResults] = useState<Hotel[]>([]);\n  const [showFlightResults, setShowFlightResults] = useState(true);\n  const [showHotelResults, setShowHotelResults] = useState(true);\n  const { toast } = useToast();\n\n  // Get package ID from URL if present\n  const urlParams = new URLSearchParams(window.location.search);\n  const packageId = urlParams.get('package');\n\n  const { data: flights } = useQuery<Flight[]>({\n    queryKey: [\"/api/flights\"],\n  });\n\n  const { data: hotels } = useQuery<Hotel[]>({\n    queryKey: [\"/api/hotels\"],\n  });\n\n  // Initialize results with all flights and hotels\n  useEffect(() => {\n    if (flights && flights.length > 0) {\n      setFlightSearchResults(flights);\n    }\n    if (hotels && hotels.length > 0) {\n      setHotelSearchResults(hotels);\n    }\n  }, [flights, hotels]);\n\n  const bookingForm = useForm<InsertBooking>({\n    resolver: zodResolver(insertBookingSchema.extend({\n      departureDate: insertBookingSchema.shape.departureDate,\n      returnDate: insertBookingSchema.shape.returnDate.optional(),\n    })),\n    defaultValues: {\n      packageId: packageId || \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      travelers: 1,\n      departureDate: new Date(),\n      returnDate: undefined,\n      totalPrice: \"0\",\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: InsertBooking) => {\n      const response = await apiRequest(\"POST\", \"/api/bookings\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Booking confirmed!\",\n        description: `Your booking has been confirmed. Booking ID: ${data.id}`,\n      });\n      bookingForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Booking failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onBookingSubmit = (data: InsertBooking) => {\n    bookingMutation.mutate(data);\n  };\n\n  const handleFlightSearch = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const from = formData.get('from') as string;\n    const to = formData.get('to') as string;\n    \n    // Filter flights based on search criteria\n    if (!from && !to) {\n      // Show all flights if no search criteria\n      setFlightSearchResults(flights || []);\n    } else {\n      const filtered = flights?.filter(flight => {\n        const fromMatch = !from || flight.from.toLowerCase().includes(from.toLowerCase());\n        const toMatch = !to || flight.to.toLowerCase().includes(to.toLowerCase());\n        return fromMatch && toMatch;\n      }) || [];\n      setFlightSearchResults(filtered);\n    }\n    setShowFlightResults(true);\n  };\n\n  const handleHotelSearch = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const destination = formData.get('destination') as string;\n    \n    // Filter hotels based on search criteria\n    if (!destination) {\n      // Show all hotels if no search criteria\n      setHotelSearchResults(hotels || []);\n    } else {\n      const filtered = hotels?.filter(hotel => {\n        const locationMatch = hotel.location.toLowerCase().includes(destination.toLowerCase()) ||\n          hotel.name.toLowerCase().includes(destination.toLowerCase());\n        return locationMatch;\n      }) || [];\n      setHotelSearchResults(filtered);\n    }\n    setShowHotelResults(true);\n  };\n\n  const bookingTabs = [\n    { id: \"flights\", label: \"Flights\", icon: Plane },\n    { id: \"hotels\", label: \"Hotels\", icon: Bed },\n    { id: \"packages\", label: \"Packages\", icon: Briefcase },\n  ];\n\n  const packageTypes = [\n    {\n      id: \"luxury\",\n      title: \"Luxury Packages\",\n      description: \"Premium accommodations, first-class flights, and exclusive experiences.\",\n      price: \"Starting from $4,999\",\n      icon: Crown,\n      color: \"text-accent\",\n    },\n    {\n      id: \"adventure\",\n      title: \"Adventure Packages\",\n      description: \"Thrilling activities, unique accommodations, and guided adventures.\",\n      price: \"Starting from $2,299\",\n      icon: Mountain,\n      color: \"text-red-500\",\n    },\n    {\n      id: \"family\",\n      title: \"Family Packages\",\n      description: \"Family-friendly destinations with activities for all ages.\",\n      price: \"Starting from $1,899\",\n      icon: Users,\n      color: \"text-secondary\",\n    },\n    {\n      id: \"cultural\",\n      title: \"Cultural Packages\",\n      description: \"Immersive cultural experiences and historical discoveries.\",\n      price: \"Starting from $1,599\",\n      icon: Landmark,\n      color: \"text-purple-500\",\n    },\n  ];\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"py-20 bg-primary text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">Book Your Journey</h1>\n          <p className=\"text-xl max-w-3xl mx-auto\">\n            Find and book flights, hotels, and complete travel packages all in one place.\n          </p>\n        </div>\n      </section>\n\n      {/* Booking Tabs */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-center space-x-8\">\n            {bookingTabs.map((tab) => {\n              const IconComponent = tab.icon;\n              return (\n                <Button\n                  key={tab.id}\n                  variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                  className={cn(\n                    \"flex items-center space-x-2 px-6 py-3 rounded-lg font-medium\",\n                    activeTab === tab.id\n                      ? \"bg-primary text-white\"\n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )}\n                  onClick={() => setActiveTab(tab.id)}\n                >\n                  <IconComponent size={20} />\n                  <span>{tab.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Flight Booking Section */}\n      {activeTab === \"flights\" && (\n        <section className=\"py-20 bg-gray-50\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Card className=\"bg-white rounded-xl shadow-lg p-8\">\n              <CardContent className=\"pt-0\">\n                <h2 className=\"text-2xl font-bold mb-6\">Search Flights</h2>\n                <form onSubmit={handleFlightSearch} className=\"space-y-6\">\n                  <div className=\"flex space-x-4 mb-6\">\n                    <label className=\"flex items-center\">\n                      <input type=\"radio\" name=\"tripType\" value=\"round-trip\" defaultChecked className=\"mr-2\" />\n                      <span>Round Trip</span>\n                    </label>\n                    <label className=\"flex items-center\">\n                      <input type=\"radio\" name=\"tripType\" value=\"one-way\" className=\"mr-2\" />\n                      <span>One Way</span>\n                    </label>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"from\">From</Label>\n                      <Input id=\"from\" name=\"from\" placeholder=\"Departure city or airport\" className=\"mt-2\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"to\">To</Label>\n                      <Input id=\"to\" name=\"to\" placeholder=\"Destination city or airport\" className=\"mt-2\" />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <Label htmlFor=\"departure\">Departure Date</Label>\n                      <Input id=\"departure\" type=\"date\" className=\"mt-2\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"return\">Return Date</Label>\n                      <Input id=\"return\" type=\"date\" className=\"mt-2\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"passengers\">Passengers</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue placeholder=\"1 Adult\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1\">1 Adult</SelectItem>\n                          <SelectItem value=\"2\">2 Adults</SelectItem>\n                          <SelectItem value=\"3\">3 Adults</SelectItem>\n                          <SelectItem value=\"4\">4+ Adults</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-4 rounded-lg text-lg\">\n                    Search Flights\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Flight Results */}\n            {showFlightResults && (\n              <div className=\"mt-8\">\n                <h3 className=\"text-xl font-bold mb-6\">Available Flights ({flightSearchResults.length} found)</h3>\n                <div className=\"space-y-4\">\n                  {flightSearchResults.map((flight) => (\n                    <Card key={flight.id} className=\"bg-white rounded-lg shadow-md p-6 border border-gray-200\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-8\">\n                          <div className=\"text-center\">\n                            <div className=\"text-lg font-bold\">{flight.departureTime}</div>\n                            <div className=\"text-sm text-gray-600\">{flight.from}</div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-8 h-px bg-gray-300\"></div>\n                            <Plane className=\"text-primary\" size={20} />\n                            <div className=\"w-8 h-px bg-gray-300\"></div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-lg font-bold\">{flight.arrivalTime}</div>\n                            <div className=\"text-sm text-gray-600\">{flight.to}</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-sm text-gray-600\">{flight.duration}</div>\n                            <div className=\"text-sm text-gray-600\">{flight.stops} stop{flight.stops !== 1 ? 's' : ''}</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold text-primary\">${flight.price}</div>\n                          <Button \n                            className=\"bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg\"\n                            onClick={() => window.location.href = `/payment?type=flight&id=${flight.id}&price=${flight.price}`}\n                          >\n                            Select Flight\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Hotel Booking Section */}\n      {activeTab === \"hotels\" && (\n        <section className=\"py-20 bg-gray-50\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Card className=\"bg-white rounded-xl shadow-lg p-8\">\n              <CardContent className=\"pt-0\">\n                <h2 className=\"text-2xl font-bold mb-6\">Search Hotels</h2>\n                <form onSubmit={handleHotelSearch} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"destination\">Destination</Label>\n                    <Input id=\"destination\" name=\"destination\" placeholder=\"Enter city or hotel name\" className=\"mt-2\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <Label htmlFor=\"checkin\">Check-in Date</Label>\n                      <Input id=\"checkin\" type=\"date\" className=\"mt-2\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"checkout\">Check-out Date</Label>\n                      <Input id=\"checkout\" type=\"date\" className=\"mt-2\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"guests\">Guests</Label>\n                      <Select>\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue placeholder=\"1 Guest\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1\">1 Guest</SelectItem>\n                          <SelectItem value=\"2\">2 Guests</SelectItem>\n                          <SelectItem value=\"3\">3 Guests</SelectItem>\n                          <SelectItem value=\"4\">4+ Guests</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-4 rounded-lg text-lg\">\n                    Search Hotels\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Hotel Results */}\n            {showHotelResults && (\n              <div className=\"mt-8\">\n                <h3 className=\"text-xl font-bold mb-6\">Available Hotels ({hotelSearchResults.length} found)</h3>\n                <div className=\"grid grid-cols-1 gap-6\">\n                  {hotelSearchResults.map((hotel) => (\n                    <Card key={hotel.id} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n                      <div className=\"flex\">\n                        <img\n                          src={hotel.imageUrl}\n                          alt={hotel.name}\n                          className=\"w-1/3 h-48 object-cover\"\n                        />\n                        <div className=\"w-2/3 p-6 flex justify-between\">\n                          <div>\n                            <h4 className=\"text-xl font-bold mb-2\">{hotel.name}</h4>\n                            <div className=\"flex items-center mb-2\">\n                              <div className=\"flex text-yellow-400 mr-2\">\n                                {[...Array(hotel.starRating)].map((_, i) => (\n                                  <Star key={i} size={16} className=\"fill-current\" />\n                                ))}\n                              </div>\n                              <span className=\"text-gray-600\">{hotel.starRating}-star luxury</span>\n                            </div>\n                            <p className=\"text-gray-600 mb-2\">{hotel.amenities.join(\" • \")}</p>\n                            <p className=\"text-sm text-gray-500\">{hotel.distanceFromCenter}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-2xl font-bold text-primary\">${hotel.pricePerNight}</div>\n                            <div className=\"text-sm text-gray-600\">per night</div>\n                            <Button \n                              className=\"bg-primary hover:bg-primary/90 text-white px-6 py-2 rounded-lg mt-2\"\n                              onClick={() => window.location.href = `/payment?type=hotel&id=${hotel.id}&price=${hotel.pricePerNight}`}\n                            >\n                              Book Hotel\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Package Booking Section */}\n      {activeTab === \"packages\" && (\n        <section className=\"py-20 bg-gray-50\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Card className=\"bg-white rounded-xl shadow-lg p-8\">\n              <CardContent className=\"pt-0\">\n                <h2 className=\"text-2xl font-bold mb-6\">Book Complete Packages</h2>\n                \n                <div className=\"text-center mb-8\">\n                  <p className=\"text-lg text-gray-600\">\n                    Select from our curated travel packages that include flights, hotels, and activities.\n                  </p>\n                </div>\n\n                {/* Quick Package Selection */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {packageTypes.map((pkg) => {\n                    const IconComponent = pkg.icon;\n                    return (\n                      <Card\n                        key={pkg.id}\n                        className=\"border border-gray-200 rounded-lg p-6 hover:border-primary cursor-pointer transition-colors\"\n                        onClick={() => {\n                          window.location.href = \"/trips\";\n                        }}\n                      >\n                        <CardContent className=\"pt-0\">\n                          <div className=\"flex items-center mb-4\">\n                            <IconComponent className={`${pkg.color} text-2xl mr-3`} size={32} />\n                            <h3 className=\"text-xl font-bold\">{pkg.title}</h3>\n                          </div>\n                          <p className=\"text-gray-600\">{pkg.description}</p>\n                          <div className=\"mt-4 text-primary font-bold\">{pkg.price}</div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n\n                <div className=\"mt-8 text-center\">\n                  <Button\n                    onClick={() => window.location.href = \"/trips\"}\n                    className=\"bg-primary hover:bg-primary/90 text-white font-bold py-3 px-8 rounded-lg\"\n                  >\n                    View All Packages\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n","size_bytes":19819},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { MapPin, Phone, Mail, Clock, Facebook, Instagram, Twitter, Youtube, CheckCircle } from \"lucide-react\";\nimport OfficeMap from \"@/components/office-map\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport type { InsertContact } from \"@shared/schema\";\n\nexport default function Contact() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      subject: \"\",\n      message: \"\",\n      newsletter: false,\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      const response = await apiRequest(\"POST\", \"/api/contacts\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      form.reset();\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setTimeout(() => setIsSubmitted(false), 5000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error sending message\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    contactMutation.mutate(data);\n  };\n\n  const contactInfo = [\n    {\n      icon: MapPin,\n      title: \"Office Address\",\n      details: [\"123 Travel Street\", \"New York, NY 10001\", \"United States\"],\n    },\n    {\n      icon: Phone,\n      title: \"Phone Numbers\",\n      details: [\"Main: +1 (555) 123-4567\", \"Emergency: +1 (555) 987-6543\"],\n    },\n    {\n      icon: Mail,\n      title: \"Email Addresses\",\n      details: [\"info@whizztravels.com\", \"bookings@whizztravels.com\"],\n    },\n    {\n      icon: Clock,\n      title: \"Business Hours\",\n      details: [\"Monday - Friday: 9:00 AM - 7:00 PM\", \"Saturday: 10:00 AM - 4:00 PM\", \"Sunday: Closed\"],\n    },\n  ];\n\n  const socialLinks = [\n    { icon: Facebook, label: \"Facebook\" },\n    { icon: Instagram, label: \"Instagram\" },\n    { icon: Twitter, label: \"Twitter\" },\n    { icon: Youtube, label: \"YouTube\" },\n  ];\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"py-20 bg-primary text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">Contact Us</h1>\n          <p className=\"text-xl max-w-3xl mx-auto\">\n            Have questions about your next adventure? Our travel experts are here to help you plan the perfect trip.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Information & Form */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-8\">Get in Touch</h2>\n              \n              <div className=\"space-y-6\">\n                {contactInfo.map((info, index) => {\n                  const IconComponent = info.icon;\n                  return (\n                    <div key={index} className=\"flex items-start\">\n                      <IconComponent className=\"text-primary text-xl mr-4 mt-1\" size={20} />\n                      <div>\n                        <h3 className=\"font-semibold text-lg mb-1\">{info.title}</h3>\n                        <div className=\"text-gray-600\">\n                          {info.details.map((detail, i) => (\n                            <p key={i}>{detail}</p>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* Social Media Links */}\n              <div className=\"mt-8\">\n                <h3 className=\"font-semibold text-lg mb-4\">Follow Us</h3>\n                <div className=\"flex space-x-4\">\n                  {socialLinks.map((social, index) => {\n                    const IconComponent = social.icon;\n                    return (\n                      <a\n                        key={index}\n                        href=\"#\"\n                        className=\"w-10 h-10 bg-primary text-white rounded-full flex items-center justify-center hover:bg-primary/90 transition-colors\"\n                        aria-label={social.label}\n                      >\n                        <IconComponent size={20} />\n                      </a>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Form */}\n            <Card className=\"bg-white rounded-xl shadow-lg p-8\">\n              <CardContent className=\"pt-0\">\n                <h2 className=\"text-2xl font-bold mb-6\">Send us a Message</h2>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name *</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address *</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input type=\"tel\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"subject\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Subject</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a subject\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"booking\">Booking Inquiry</SelectItem>\n                              <SelectItem value=\"package\">Package Information</SelectItem>\n                              <SelectItem value=\"support\">Customer Support</SelectItem>\n                              <SelectItem value=\"feedback\">Feedback</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message *</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              rows={5} \n                              placeholder=\"Tell us about your travel plans or questions...\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"newsletter\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value || false}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-sm text-gray-600\">\n                              Subscribe to our newsletter for travel deals and updates\n                            </FormLabel>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-4 rounded-lg text-lg\"\n                      disabled={contactMutation.isPending}\n                    >\n                      {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </Form>\n\n                {/* Success Message */}\n                {isSubmitted && (\n                  <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"text-green-500 mr-2\" size={20} />\n                      <span className=\"text-green-700\">\n                        Thank you! Your message has been sent successfully. We'll get back to you within 24 hours.\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Map Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Visit Our Office</h2>\n            <p className=\"text-xl text-gray-600\">Come see us in person to plan your perfect getaway</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Interactive Map */}\n            <div className=\"lg:col-span-2\">\n              <OfficeMap \n                address=\"123 Travel Street, New York, NY 10001\"\n                city=\"New York\"\n                coordinates={{ lat: 40.7128, lng: -74.0060 }}\n              />\n            </div>\n            \n            {/* Office Details */}\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-br from-primary/5 to-primary/10 rounded-xl p-6 border border-primary/20\">\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Office Details</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start\">\n                    <MapPin className=\"text-primary mr-3 mt-1\" size={20} />\n                    <div>\n                      <p className=\"font-semibold\">Address</p>\n                      <p className=\"text-gray-600 text-sm\">123 Travel Street<br />New York, NY 10001<br />United States</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start\">\n                    <Clock className=\"text-primary mr-3 mt-1\" size={20} />\n                    <div>\n                      <p className=\"font-semibold\">Business Hours</p>\n                      <div className=\"text-gray-600 text-sm space-y-1\">\n                        <p>Monday - Friday: 9:00 AM - 7:00 PM</p>\n                        <p>Saturday: 10:00 AM - 4:00 PM</p>\n                        <p>Sunday: Closed</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start\">\n                    <Phone className=\"text-primary mr-3 mt-1\" size={20} />\n                    <div>\n                      <p className=\"font-semibold\">Contact</p>\n                      <div className=\"text-gray-600 text-sm space-y-1\">\n                        <p>Main: +1 (555) 123-4567</p>\n                        <p>Emergency: +1 (555) 987-6543</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-amber-800 mb-2\">Getting Here</h4>\n                <div className=\"text-amber-700 text-sm space-y-1\">\n                  <p>🚇 Subway: Union Square (4,5,6,L,N,Q,R,W)</p>\n                  <p>🚌 Bus: Multiple routes available</p>\n                  <p>🚗 Parking: Street parking & nearby garages</p>\n                  <p>🚶 Walkable from major attractions</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-green-800 mb-2\">Services Available</h4>\n                <div className=\"text-green-700 text-sm space-y-1\">\n                  <p>✓ In-person travel consultation</p>\n                  <p>✓ Trip planning & booking</p>\n                  <p>✓ Travel document assistance</p>\n                  <p>✓ Group booking services</p>\n                  <p>✓ Emergency travel support</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":15954},"client/src/pages/destination-details.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { MapPin, Star, Calendar, Users, ArrowLeft, Camera, Wifi, Car, Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport TripPackageCard from \"@/components/trip-package-card\";\nimport type { Destination, TripPackage, Hotel, Flight } from \"@shared/schema\";\n\nexport default function DestinationDetails() {\n  const [location] = useLocation();\n  const destinationId = location.split('/')[2];\n\n  const { data: destination, isLoading: destinationLoading } = useQuery<Destination>({\n    queryKey: [\"/api/destinations\", destinationId],\n    queryFn: async () => {\n      const response = await fetch(`/api/destinations/${destinationId}`);\n      return response.json();\n    },\n  });\n\n  const { data: relatedPackages } = useQuery<TripPackage[]>({\n    queryKey: [\"/api/trip-packages\", destination?.location],\n    queryFn: async () => {\n      const response = await fetch(\"/api/trip-packages\");\n      const packages = await response.json();\n      return packages.filter((pkg: TripPackage) => \n        pkg.location.toLowerCase().includes(destination?.location.toLowerCase() || '')\n      );\n    },\n    enabled: !!destination,\n  });\n\n  const { data: hotels } = useQuery<Hotel[]>({\n    queryKey: [\"/api/hotels\", destination?.location],\n    queryFn: async () => {\n      const response = await fetch(`/api/hotels?location=${destination?.location}`);\n      return response.json();\n    },\n    enabled: !!destination,\n  });\n\n  const { data: flights } = useQuery<Flight[]>({\n    queryKey: [\"/api/flights\", destination?.location],\n    queryFn: async () => {\n      const response = await fetch(\"/api/flights\");\n      const allFlights = await response.json();\n      return allFlights.filter((flight: Flight) => \n        flight.to.toLowerCase().includes(destination?.location.toLowerCase() || '') ||\n        flight.to.toLowerCase().includes(destination?.name.toLowerCase() || '')\n      );\n    },\n    enabled: !!destination,\n  });\n\n  const attractions = [\n    { name: \"Historic City Center\", description: \"Explore centuries-old architecture and museums\", icon: Camera },\n    { name: \"Local Markets\", description: \"Experience authentic local culture and cuisine\", icon: Coffee },\n    { name: \"Natural Landscapes\", description: \"Breathtaking views and outdoor activities\", icon: MapPin },\n  ];\n\n  const amenities = [\n    { name: \"Free WiFi\", icon: Wifi },\n    { name: \"Airport Transfer\", icon: Car },\n    { name: \"Tour Guide\", icon: Users },\n    { name: \"Photography\", icon: Camera },\n  ];\n\n  if (destinationLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-8\"></div>\n            <div className=\"h-96 bg-gray-200 rounded-xl mb-8\"></div>\n            <div className=\"h-64 bg-gray-200 rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!destination) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Destination not found</h1>\n          <Link href=\"/\">\n            <Button>Back to Home</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <Link href=\"/\" className=\"inline-flex items-center text-primary hover:text-primary/80\">\n            <ArrowLeft size={20} className=\"mr-2\" />\n            Back to Destinations\n          </Link>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative h-96 overflow-hidden\">\n        <img\n          src={destination.imageUrl}\n          alt={destination.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-4\">{destination.name}</h1>\n            <div className=\"flex items-center justify-center gap-4\">\n              <div className=\"flex items-center\">\n                <MapPin size={20} className=\"mr-2\" />\n                <span className=\"text-lg\">{destination.location}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Star size={20} className=\"mr-1 fill-current text-yellow-400\" />\n                <span className=\"text-lg\">{destination.rating}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"mb-8\">\n              <CardContent className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-4\">About {destination.name}</h2>\n                <p className=\"text-gray-700 text-lg leading-relaxed mb-6\">\n                  {destination.description}\n                </p>\n                \n                <h3 className=\"text-xl font-semibold mb-4\">Top Attractions</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {attractions.map((attraction, index) => {\n                    const IconComponent = attraction.icon;\n                    return (\n                      <div key={index} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                        <IconComponent className=\"text-primary mb-2\" size={24} />\n                        <h4 className=\"font-semibold mb-1\">{attraction.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{attraction.description}</p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Packages, Hotels, Flights Tabs */}\n            <Tabs defaultValue=\"packages\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"packages\">Trip Packages ({relatedPackages?.length || 0})</TabsTrigger>\n                <TabsTrigger value=\"hotels\">Hotels ({hotels?.length || 0})</TabsTrigger>\n                <TabsTrigger value=\"flights\">Flights ({flights?.length || 0})</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"packages\" className=\"mt-6\">\n                {relatedPackages && relatedPackages.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {relatedPackages.map((pkg) => (\n                      <TripPackageCard\n                        key={pkg.id}\n                        tripPackage={pkg}\n                        onBook={(id) => window.location.href = `/booking?package=${id}`}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-600\">No packages available for this destination yet.</p>\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"hotels\" className=\"mt-6\">\n                {hotels && hotels.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {hotels.map((hotel) => (\n                      <Card key={hotel.id} className=\"overflow-hidden\">\n                        <div className=\"flex\">\n                          <img\n                            src={hotel.imageUrl}\n                            alt={hotel.name}\n                            className=\"w-48 h-32 object-cover\"\n                          />\n                          <CardContent className=\"flex-1 p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <h3 className=\"font-bold text-lg mb-2\">{hotel.name}</h3>\n                                <div className=\"flex items-center mb-2\">\n                                  <div className=\"flex text-yellow-400 mr-2\">\n                                    {[...Array(hotel.starRating)].map((_, i) => (\n                                      <Star key={i} size={16} className=\"fill-current\" />\n                                    ))}\n                                  </div>\n                                  <span className=\"text-sm text-gray-600\">({hotel.rating})</span>\n                                </div>\n                                <p className=\"text-sm text-gray-600 mb-2\">{hotel.description}</p>\n                                <p className=\"text-xs text-gray-500\">{hotel.distanceFromCenter}</p>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-2xl font-bold text-primary\">${hotel.pricePerNight}</div>\n                                <div className=\"text-sm text-gray-600\">per night</div>\n                                <Button className=\"mt-2\" size=\"sm\">Book Hotel</Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-600\">No hotels found for this destination.</p>\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"flights\" className=\"mt-6\">\n                {flights && flights.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {flights.map((flight) => (\n                      <Card key={flight.id} className=\"p-6\">\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex items-center space-x-8\">\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold\">{flight.departureTime}</div>\n                              <div className=\"text-sm text-gray-600\">{flight.from}</div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-px bg-gray-300\"></div>\n                              <div className=\"text-sm text-gray-600\">{flight.duration}</div>\n                              <div className=\"w-8 h-px bg-gray-300\"></div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"text-lg font-bold\">{flight.arrivalTime}</div>\n                              <div className=\"text-sm text-gray-600\">{flight.to}</div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-2xl font-bold text-primary\">${flight.price}</div>\n                            <Button size=\"sm\">Book Flight</Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-600\">No flights found for this destination.</p>\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-4\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">From ${destination.price}</div>\n                  <div className=\"text-gray-600\">per person</div>\n                </div>\n                \n                <div className=\"space-y-4 mb-6\">\n                  <h3 className=\"font-semibold\">Included Services</h3>\n                  {amenities.map((amenity, index) => {\n                    const IconComponent = amenity.icon;\n                    return (\n                      <div key={index} className=\"flex items-center\">\n                        <IconComponent size={16} className=\"text-primary mr-3\" />\n                        <span className=\"text-sm\">{amenity.name}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n                \n                <Button \n                  className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-3\"\n                  onClick={() => window.location.href = '/booking'}\n                >\n                  Book This Destination\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full mt-3\"\n                  onClick={() => window.location.href = '/contact'}\n                >\n                  Contact Us\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13848},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plane, Bed, Map, Star, Globe } from \"lucide-react\";\nimport HeroSection from \"@/components/hero-section\";\nimport DestinationCard from \"@/components/destination-card\";\nimport InteractiveMap from \"@/components/interactive-map\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Destination } from \"@shared/schema\";\n\nexport default function Home() {\n  const [selectedDestination, setSelectedDestination] = useState<Destination | null>(null);\n  \n  const { data: destinations, isLoading } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  const featuredDestinations = destinations?.slice(0, 4) || [];\n\n  const services = [\n    {\n      icon: Plane,\n      title: \"Flight Booking\",\n      description: \"Find the best deals on flights worldwide with our exclusive partnerships\",\n    },\n    {\n      icon: Bed,\n      title: \"Hotel Reservations\",\n      description: \"Book luxury accommodations at competitive prices in prime locations\",\n    },\n    {\n      icon: Map,\n      title: \"Tour Packages\",\n      description: \"Expertly curated travel packages for unforgettable experiences\",\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: \"John & Sarah\",\n      trip: \"Maldives Trip\",\n      review: \"WHIZZ TRAVELS made our honeymoon absolutely perfect. Every detail was taken care of!\",\n      initials: \"JS\",\n    },\n    {\n      name: \"Maria Johnson\",\n      trip: \"European Tour\",\n      review: \"Best travel agency ever! Professional service and amazing destinations. Highly recommended!\",\n      initials: \"MJ\",\n    },\n    {\n      name: \"David Kim\",\n      trip: \"Kenya Safari\",\n      review: \"The safari experience was life-changing. Thank you for making our dream trip come true!\",\n      initials: \"DK\",\n    },\n  ];\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <HeroSection\n        title=\"Discover the World\"\n        subtitle=\"Your next adventure awaits. Explore breathtaking destinations with our expertly crafted travel experiences.\"\n        backgroundImage=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\"\n      />\n\n      {/* Featured Destinations Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Explore Destinations</h2>\n            <p className=\"text-xl text-gray-600\">Discover our most popular travel destinations worldwide</p>\n          </div>\n\n          <Tabs defaultValue=\"grid\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 max-w-md mx-auto mb-8\">\n              <TabsTrigger value=\"grid\" className=\"flex items-center gap-2\">\n                <Bed size={16} />\n                Grid View\n              </TabsTrigger>\n              <TabsTrigger value=\"map\" className=\"flex items-center gap-2\">\n                <Globe size={16} />\n                Map View\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"grid\">\n              {isLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"bg-gray-200 animate-pulse rounded-xl h-96\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n                  {featuredDestinations.map((destination) => (\n                    <DestinationCard\n                      key={destination.id}\n                      destination={destination}\n                    />\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"map\">\n              {destinations && (\n                <InteractiveMap\n                  destinations={destinations}\n                  selectedDestination={selectedDestination}\n                  onDestinationClick={(dest) => {\n                    setSelectedDestination(dest);\n                    window.location.href = `/destination/${dest.id}`;\n                  }}\n                />\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Our Services</h2>\n            <p className=\"text-xl text-gray-600\">Everything you need for the perfect trip</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {services.map((service, index) => {\n              const IconComponent = service.icon;\n              return (\n                <Card key={index} className=\"text-center p-8 bg-white rounded-xl shadow-lg\">\n                  <CardContent className=\"pt-6\">\n                    <IconComponent className=\"text-primary text-4xl mb-4 mx-auto\" size={48} />\n                    <h3 className=\"text-xl font-semibold mb-4\">{service.title}</h3>\n                    <p className=\"text-gray-600\">{service.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">What Our Travelers Say</h2>\n            <p className=\"text-xl text-gray-600\">Real experiences from real travelers</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"bg-gray-50 p-8 rounded-xl\">\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex mb-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"text-accent fill-current\" size={20} />\n                    ))}\n                  </div>\n                  <p className=\"text-gray-700 mb-4\">\"{testimonial.review}\"</p>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                      {testimonial.initials}\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">{testimonial.name}</p>\n                      <p className=\"text-gray-600\">{testimonial.trip}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":7243},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { ArrowLeft, CreditCard, Building, Smartphone, Shield, Lock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { TripPackage } from \"@shared/schema\";\n\nconst paymentSchema = z.object({\n  paymentMethod: z.enum([\"credit-card\", \"debit-card\", \"net-banking\", \"upi\"]),\n  cardNumber: z.string().optional(),\n  expiryDate: z.string().optional(),\n  cvv: z.string().optional(),\n  cardholderName: z.string().optional(),\n  bankName: z.string().optional(),\n  upiId: z.string().optional(),\n  billingAddress: z.object({\n    fullName: z.string().min(1, \"Full name is required\"),\n    email: z.string().email(\"Invalid email\"),\n    phone: z.string().min(10, \"Invalid phone number\"),\n    address: z.string().min(1, \"Address is required\"),\n    city: z.string().min(1, \"City is required\"),\n    state: z.string().min(1, \"State is required\"),\n    zipCode: z.string().min(5, \"Invalid zip code\"),\n    country: z.string().min(1, \"Country is required\"),\n  }),\n});\n\ntype PaymentData = z.infer<typeof paymentSchema>;\n\nexport default function Payment() {\n  const [selectedPackage, setSelectedPackage] = useState<TripPackage | null>(null);\n  const [travelers, setTravelers] = useState(1);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const { toast } = useToast();\n\n  // Get booking details from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const packageId = urlParams.get('package');\n  const flightId = urlParams.get('id');\n  const hotelId = urlParams.get('id');\n  const bookingType = urlParams.get('type') || 'package';\n  const urlTravelers = parseInt(urlParams.get('travelers') || '1');\n  const urlPrice = urlParams.get('price');\n\n  const { data: tripPackage } = useQuery<TripPackage>({\n    queryKey: [\"/api/trip-packages\", packageId],\n    queryFn: async () => {\n      const response = await fetch(`/api/trip-packages/${packageId}`);\n      return response.json();\n    },\n    enabled: !!packageId && bookingType === 'package',\n  });\n\n  const { data: flight } = useQuery({\n    queryKey: [\"/api/flights\", flightId],\n    queryFn: async () => {\n      const response = await fetch(\"/api/flights\");\n      const flights = await response.json();\n      return flights.find((f: any) => f.id === flightId);\n    },\n    enabled: !!flightId && bookingType === 'flight',\n  });\n\n  const { data: hotel } = useQuery({\n    queryKey: [\"/api/hotels\", hotelId],\n    queryFn: async () => {\n      const response = await fetch(\"/api/hotels\");\n      const hotels = await response.json();\n      return hotels.find((h: any) => h.id === hotelId);\n    },\n    enabled: !!hotelId && bookingType === 'hotel',\n  });\n\n  const form = useForm<PaymentData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      paymentMethod: \"credit-card\",\n      billingAddress: {\n        fullName: \"\",\n        email: \"\",\n        phone: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zipCode: \"\",\n        country: \"United States\",\n      },\n    },\n  });\n\n  const paymentMethod = form.watch(\"paymentMethod\");\n\n  useEffect(() => {\n    if (bookingType === 'package' && tripPackage) {\n      setSelectedPackage(tripPackage);\n      setTravelers(urlTravelers);\n      setTotalAmount(parseFloat(tripPackage.price) * urlTravelers);\n    } else if (bookingType === 'flight' && flight) {\n      setSelectedPackage({ \n        ...flight, \n        title: `${flight.airline} Flight`, \n        location: `${flight.from} to ${flight.to}`,\n        duration: flight.duration,\n        imageUrl: 'https://images.unsplash.com/photo-1436491865332-7a61a109cc05?auto=format&fit=crop&w=300&h=200'\n      });\n      setTravelers(urlTravelers);\n      setTotalAmount(parseFloat(urlPrice || flight.price));\n    } else if (bookingType === 'hotel' && hotel) {\n      setSelectedPackage({\n        ...hotel,\n        title: hotel.name,\n        location: hotel.location,\n        duration: '1 night',\n        price: hotel.pricePerNight\n      });\n      setTravelers(urlTravelers);\n      setTotalAmount(parseFloat(urlPrice || hotel.pricePerNight));\n    }\n  }, [tripPackage, flight, hotel, urlTravelers, urlPrice, bookingType]);\n\n  const paymentMutation = useMutation({\n    mutationFn: async (data: PaymentData) => {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return { success: true, transactionId: `TXN${Date.now()}` };\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Payment Successful!\",\n        description: `Transaction ID: ${result.transactionId}. Your booking has been confirmed.`,\n      });\n      // Redirect to success page or booking confirmation\n      setTimeout(() => {\n        window.location.href = `/booking-confirmation?transaction=${result.transactionId}`;\n      }, 2000);\n    },\n    onError: () => {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Please check your payment details and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentData) => {\n    paymentMutation.mutate(data);\n  };\n\n  const paymentMethods = [\n    {\n      id: \"credit-card\",\n      name: \"Credit Card\",\n      icon: CreditCard,\n      description: \"Visa, Mastercard, American Express\"\n    },\n    {\n      id: \"debit-card\",\n      name: \"Debit Card\",\n      icon: CreditCard,\n      description: \"Visa, Mastercard Debit\"\n    },\n    {\n      id: \"net-banking\",\n      name: \"Net Banking\",\n      icon: Building,\n      description: \"All major banks supported\"\n    },\n    {\n      id: \"upi\",\n      name: \"UPI\",\n      icon: Smartphone,\n      description: \"Pay using UPI ID\"\n    }\n  ];\n\n  const taxes = totalAmount * 0.12; // 12% tax\n  const processingFee = 25;\n  const finalAmount = totalAmount + taxes + processingFee;\n\n  if (!selectedPackage) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Loading booking details...</h1>\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      {/* Navigation */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-8\">\n        <Link href=\"/booking\" className=\"inline-flex items-center text-primary hover:text-primary/80\">\n          <ArrowLeft size={20} className=\"mr-2\" />\n          Back to Booking\n        </Link>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Payment Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lock className=\"mr-2 text-primary\" size={24} />\n                  Secure Payment\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Payment Method Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-lg font-semibold\">Select Payment Method</FormLabel>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              defaultValue={field.value}\n                              className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\n                            >\n                              {paymentMethods.map((method) => {\n                                const IconComponent = method.icon;\n                                return (\n                                  <Label\n                                    key={method.id}\n                                    htmlFor={method.id}\n                                    className=\"flex items-center space-x-3 border rounded-lg p-4 cursor-pointer hover:bg-gray-50 has-[:checked]:border-primary has-[:checked]:bg-primary/5\"\n                                  >\n                                    <RadioGroupItem value={method.id} id={method.id} />\n                                    <IconComponent size={24} className=\"text-primary\" />\n                                    <div>\n                                      <div className=\"font-semibold\">{method.name}</div>\n                                      <div className=\"text-sm text-gray-600\">{method.description}</div>\n                                    </div>\n                                  </Label>\n                                );\n                              })}\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Payment Details */}\n                    {(paymentMethod === \"credit-card\" || paymentMethod === \"debit-card\") && (\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold\">Card Details</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"cardholderName\"\n                            render={({ field }) => (\n                              <FormItem className=\"md:col-span-2\">\n                                <FormLabel>Cardholder Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"John Doe\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"cardNumber\"\n                            render={({ field }) => (\n                              <FormItem className=\"md:col-span-2\">\n                                <FormLabel>Card Number</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"1234 5678 9012 3456\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"expiryDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Expiry Date</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"MM/YY\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"cvv\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CVV</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"123\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n                    )}\n\n                    {paymentMethod === \"net-banking\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"bankName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Select Bank</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Choose your bank\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"hdfc\">HDFC Bank</SelectItem>\n                                <SelectItem value=\"icici\">ICICI Bank</SelectItem>\n                                <SelectItem value=\"sbi\">State Bank of India</SelectItem>\n                                <SelectItem value=\"axis\">Axis Bank</SelectItem>\n                                <SelectItem value=\"kotak\">Kotak Mahindra Bank</SelectItem>\n                                <SelectItem value=\"other\">Other Banks</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    {paymentMethod === \"upi\" && (\n                      <FormField\n                        control={form.control}\n                        name=\"upiId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>UPI ID</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"yourname@paytm\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    <Separator />\n\n                    {/* Billing Address */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold\">Billing Address</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.fullName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Full Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input type=\"email\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Address</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.city\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>City</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.state\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>State</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.zipCode\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>ZIP Code</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"billingAddress.country\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Country</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"United States\">United States</SelectItem>\n                                  <SelectItem value=\"Canada\">Canada</SelectItem>\n                                  <SelectItem value=\"United Kingdom\">United Kingdom</SelectItem>\n                                  <SelectItem value=\"India\">India</SelectItem>\n                                  <SelectItem value=\"Australia\">Australia</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary hover:bg-primary/90 text-white font-bold py-4 text-lg\"\n                      disabled={paymentMutation.isPending}\n                    >\n                      {paymentMutation.isPending ? \"Processing Payment...\" : `Pay $${finalAmount.toFixed(2)}`}\n                      <Shield className=\"ml-2\" size={20} />\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-4\">\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex\">\n                    <img\n                      src={selectedPackage.imageUrl}\n                      alt={selectedPackage.title}\n                      className=\"w-20 h-20 object-cover rounded-lg mr-4\"\n                    />\n                    <div>\n                      <h3 className=\"font-semibold text-sm\">{selectedPackage.title}</h3>\n                      <p className=\"text-xs text-gray-600\">{selectedPackage.location}</p>\n                      <p className=\"text-xs text-gray-600\">{selectedPackage.duration} days</p>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Package Price × {travelers}</span>\n                      <span>${(parseFloat(selectedPackage.price) * travelers).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Taxes & Fees</span>\n                      <span>${taxes.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Processing Fee</span>\n                      <span>${processingFee.toFixed(2)}</span>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total</span>\n                    <span className=\"text-primary\">${finalAmount.toFixed(2)}</span>\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-600\">\n                    <p>✅ Free cancellation up to 24 hours</p>\n                    <p>✅ Instant confirmation</p>\n                    <p>✅ Secure payment</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23704},"client/src/pages/trips.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Search, Filter, SortAsc, MapPin, DollarSign } from \"lucide-react\";\nimport TripPackageCard from \"@/components/trip-package-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport type { TripPackage } from \"@shared/schema\";\n\nexport default function Trips() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"price-asc\");\n  const [priceRange, setPriceRange] = useState([0, 10000]);\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: allTripPackages, isLoading } = useQuery<TripPackage[]>({\n    queryKey: [\"/api/trip-packages\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/trip-packages\");\n      return response.json();\n    },\n  });\n\n  const filteredAndSortedPackages = useMemo(() => {\n    if (!allTripPackages) return [];\n    \n    let filtered = allTripPackages.filter((pkg) => {\n      // Category filter\n      const categoryMatch = activeFilter === \"all\" || pkg.category === activeFilter;\n      \n      // Search filter\n      const searchMatch = searchTerm === \"\" || \n        pkg.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        pkg.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        pkg.description.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      // Price filter\n      const price = parseFloat(pkg.price);\n      const priceMatch = price >= priceRange[0] && price <= priceRange[1];\n      \n      return categoryMatch && searchMatch && priceMatch;\n    });\n    \n    // Sort packages\n    switch (sortBy) {\n      case \"price-asc\":\n        filtered.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n        break;\n      case \"price-desc\":\n        filtered.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\n        break;\n      case \"rating-desc\":\n        filtered.sort((a, b) => parseFloat(b.rating) - parseFloat(a.rating));\n        break;\n      case \"duration-asc\":\n        filtered.sort((a, b) => a.duration - b.duration);\n        break;\n      case \"duration-desc\":\n        filtered.sort((a, b) => b.duration - a.duration);\n        break;\n      default:\n        break;\n    }\n    \n    return filtered;\n  }, [allTripPackages, activeFilter, searchTerm, sortBy, priceRange]);\n\n  const filters = [\n    { id: \"all\", label: \"All Packages\", count: allTripPackages?.length || 0 },\n    { id: \"luxury\", label: \"Luxury\", count: allTripPackages?.filter(p => p.category === \"luxury\").length || 0 },\n    { id: \"adventure\", label: \"Adventure\", count: allTripPackages?.filter(p => p.category === \"adventure\").length || 0 },\n    { id: \"family\", label: \"Family\", count: allTripPackages?.filter(p => p.category === \"family\").length || 0 },\n    { id: \"cultural\", label: \"Cultural\", count: allTripPackages?.filter(p => p.category === \"cultural\").length || 0 },\n  ];\n\n  const sortOptions = [\n    { value: \"price-asc\", label: \"Price: Low to High\" },\n    { value: \"price-desc\", label: \"Price: High to Low\" },\n    { value: \"rating-desc\", label: \"Highest Rated\" },\n    { value: \"duration-asc\", label: \"Shortest Duration\" },\n    { value: \"duration-desc\", label: \"Longest Duration\" },\n  ];\n\n  const maxPrice = allTripPackages ? Math.max(...allTripPackages.map(p => parseFloat(p.price))) : 10000;\n\n  const handleFilterChange = (filterId: string) => {\n    setActiveFilter(filterId);\n  };\n\n  const handleBookTrip = (packageId: string) => {\n    // Navigate to booking page with selected package\n    window.location.href = `/booking?package=${packageId}`;\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"py-20 bg-primary text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-5xl font-bold mb-6\">Trip Plans & Packages</h1>\n          <p className=\"text-xl max-w-3xl mx-auto\">\n            Discover our carefully curated travel packages designed to give you the ultimate experience in each destination.\n          </p>\n        </div>\n      </section>\n\n      {/* Search and Filter Section */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Search Bar */}\n          <div className=\"mb-6\">\n            <div className=\"relative max-w-md mx-auto\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n              <Input\n                placeholder=\"Search destinations, activities, or locations...\"\n                className=\"pl-10 pr-4 py-3 w-full rounded-lg border border-gray-300\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          {/* Filter Buttons */}\n          <div className=\"flex flex-wrap gap-3 justify-center mb-6\">\n            {filters.map((filter) => (\n              <Button\n                key={filter.id}\n                variant={activeFilter === filter.id ? \"default\" : \"outline\"}\n                className={cn(\n                  \"px-4 py-2 rounded-full font-medium transition-colors text-sm\",\n                  activeFilter === filter.id\n                    ? \"bg-primary text-white\"\n                    : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                )}\n                onClick={() => handleFilterChange(filter.id)}\n              >\n                {filter.label} ({filter.count})\n              </Button>\n            ))}\n          </div>\n          \n          {/* Advanced Filters and Sort */}\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"flex items-center gap-2\"\n              >\n                <Filter size={16} />\n                Filters\n              </Button>\n              \n              <div className=\"flex items-center gap-2\">\n                <SortAsc size={16} className=\"text-gray-500\" />\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sortOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              Showing {filteredAndSortedPackages.length} of {allTripPackages?.length || 0} packages\n            </div>\n          </div>\n          \n          {/* Advanced Filters Panel */}\n          {showFilters && (\n            <Card className=\"mt-6\">\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-3\">Price Range</label>\n                    <div className=\"px-3\">\n                      <Slider\n                        value={priceRange}\n                        onValueChange={setPriceRange}\n                        max={maxPrice}\n                        min={0}\n                        step={100}\n                        className=\"w-full\"\n                      />\n                      <div className=\"flex justify-between text-sm text-gray-500 mt-2\">\n                        <span>${priceRange[0]}</span>\n                        <span>${priceRange[1]}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-end\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSearchTerm(\"\");\n                        setActiveFilter(\"all\");\n                        setPriceRange([0, maxPrice]);\n                        setSortBy(\"price-asc\");\n                      }}\n                      className=\"w-full\"\n                    >\n                      Reset Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </section>\n\n      {/* Trip Packages Grid */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-gray-200 animate-pulse rounded-xl h-96\" />\n              ))}\n            </div>\n          ) : filteredAndSortedPackages && filteredAndSortedPackages.length > 0 ? (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredAndSortedPackages.map((tripPackage) => (\n                  <TripPackageCard\n                    key={tripPackage.id}\n                    tripPackage={tripPackage}\n                    onBook={handleBookTrip}\n                  />\n                ))}\n              </div>\n              \n              {/* Package Stats */}\n              <div className=\"mt-12 grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-white rounded-lg shadow\">\n                  <div className=\"text-2xl font-bold text-primary\">{filteredAndSortedPackages.length}</div>\n                  <div className=\"text-sm text-gray-600\">Available Packages</div>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded-lg shadow\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {new Set(filteredAndSortedPackages.map(p => p.location)).size}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Destinations</div>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded-lg shadow\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    ${Math.min(...filteredAndSortedPackages.map(p => parseFloat(p.price)))}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Starting Price</div>\n                </div>\n                <div className=\"text-center p-4 bg-white rounded-lg shadow\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {Math.round(filteredAndSortedPackages.reduce((sum, p) => sum + parseFloat(p.rating), 0) / filteredAndSortedPackages.length * 10) / 10}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Avg Rating</div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-16\">\n              <MapPin className=\"mx-auto text-gray-400 mb-4\" size={64} />\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">No packages found</h3>\n              <p className=\"text-gray-600 mb-8\">\n                {searchTerm || activeFilter !== \"all\" || priceRange[0] > 0 || priceRange[1] < maxPrice\n                  ? \"Try adjusting your filters or search terms to find more packages.\"\n                  : \"We don't have any packages available yet. Check back soon!\"}\n              </p>\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setSearchTerm(\"\");\n                  setActiveFilter(\"all\");\n                  setPriceRange([0, maxPrice]);\n                }} variant=\"outline\">\n                  Clear Filters\n                </Button>\n                <Button onClick={() => window.location.href = \"/contact\"} variant=\"default\">\n                  Contact Us\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":12588},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}